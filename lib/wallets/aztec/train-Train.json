{
  "transpiled": true,
  "noir_version": "1.0.0-beta.7+0000000000000000000000000000000000000000",
  "name": "Train",
  "functions": [
    {
      "name": "add_lock_private_user",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "Id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "hashlock",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "timelock",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "length": 20,
            "item_types": []
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17476367995570638746": {
            "error_kind": "string",
            "string": "NoAllowance"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_note_internal",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "add_lock_public_user",
      "is_unconstrained": true,
      "custom_attributes": [
        "internal",
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "Id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "hashlock",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "timelock",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "516370165797458160": {
            "error_kind": "string",
            "string": "InvalidTimelock"
          },
          "2722406262643068352": {
            "error_kind": "string",
            "string": "HashlockAlreadySet"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6144404149669079610": {
            "error_kind": "string",
            "string": "AlreadyClaimed"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16870384257694633552": {
            "error_kind": "string",
            "string": "Function add_lock_public_user can only be called internally"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "vZ3brh03jobfxde+KJ2pvEojCJzEaRgwnMCdDDAI8u4j/pR+lp0pZa1aSd/Y36YlSpQoiTrU9u9vfnz//W///u7Dp59+/s+bb/71+5vvP3/4+PHDv7/7+PMP73798POnIf39zaF/lJzefJPfjr/lzTdt/F3Gz+EYUMOAoNAntDxA0zaVaGJRiSj0Cb0Z1CO++SYGhSGJcUDIC/qEuCQpLtDEaUCOE8qxoAyoA+qxIC/oE9qStCWRJRGZ0OOCZtCOYWnsCnVCOBbkCXFJ4kqTVq60JHmlySNXGua0EidonQ1kQhvtnLT0phLNJWlBm9CXpHcDOdKCmUZCXLAkMSwYLZaDQp+Q8gKZoO1s0CaoA+So0CbUuGBJ2pK0JZElkSXpYUE16MexQCZo8xr0CeoSOSn0CWlJUGcF1BlQJ6iTGKzEZWWvS1JXdlS+KNQJEhZoi41O6f1YkBeIQTiOTOqLAmWB6WIk1UXqNJO0qKakbjPJZX0RusOoLUKHGFHWAkm1iJJ61CRN15XU/ScNWRkjPQQdqyWA2qIQSGWRDoJJLuuLUiJRS6aWzByZOQpzFOaozFGZozKHjpoSQbJIXW9SXaTON2nJorrfpExaWmKIJOaIzBGZIzJHYo7EHJk5dA4oGdQX0d5YZFGlrFLWKGuUCWVCWaesL1k6EomyQFmgLFIWKWMPpkRZpixTRjsS7Ui0I9GORDsS7Ui0I9GORDsS7ci0I9OOTDsy7ci0I9OODDsKSBZlykogab/paMw6Sxjp7DBJfVJHVNZpwQg1NZJJBaPHaOUoGD0CqovgTUaZ1BclylBnkE50k4aWqrYVneomFdLQUtXDitoxSRapRZMoE6YT5u2U9ZUOq3hVi6ouiZNkkc5rRjqvtQiqi3QsTKJMF8RJlFWm0xFv1CjTJX2SRiiolY74SW2RjvhJZVLTET9JS9M+x9I+qZBGGzTt86Y9M0kW6TifVBfBNiPmyNRSKCvUonN2E1BdpHP2JK2LzspNDlImyaJOmYYEIDkyaaVDVDCpLtK4YNIoTXTml3SQMkkWqf9NaosKZdqDRtqDEkCySL1OIqgt0n6TBFKZ9ozoejSpTkKgMKksCpTpWjtJFsVIopbEHIk5EnNk5sjMUZijMIf2oKiXdJ3hJrVF2oOT6iKhTOeNSX1Rp5Y+tYyFKZAKqS8KicQckTkic+hc0g8ljS16VFI/naSypKRW9qykvWCkvdChRWsFQlTQK0hlTUn9qguoLYqURZV1JR0zIz5SxPbBEBuIIwA7EZuIIwIh1VqGDmkG9oVYuRdCqjWNAdIKhFTrijV7IaRax5hcgzrDlObk6FLbC3WgTCNjjRSqH0xsLlV/D7qFGrGCSkMCQqrVxQI5ghpFXSEXulTjmIkdu7AOrAvzGiCDyqJAWaAsUhYpS5QlyjJlmbJCWaGsUlYpa5Q1yoQyoaxT1pes0I5COwrtKLSj0I5COwrtKLSj0I5COwrtKLSj0I5COwrtKLSj0I5COwrtKLSj0o6qdgTdrw7sRDhoRAI4aFQ/wPZ3oUs1eFnYiBpIL6zE4tJSHKFM3Qdb5DEsgZCqC2NNXehSSY6NCAecWBdiy7ywOEKZeig2ziMEBao06VDH8hp0+zuwE5NLMSQNdYJeWImweKJLtT8XQlkCoght9QaLUwF2orhUhNijY10osHiiS8PhCGUViCK01cUsFiCk2jpiFhu6FJPQxEY0iw0rsbpUXXihKsva6mKHNQEIqbaOoI8nCrG7tFPaj+TYiBrZLqxEXQMWetrkGpLrzdmRNevwX0P05kQvonnBzYsQL9gN6m5Q76uIhI37xHA4FmIMjpWYomMj5uQoxOJFFC+4ehHNC25ehHjB4kV0L5jdkgK7ZSCLCIEFY5e+kAWHFBxZcMjRkQVjX74Q0qKIhW+iS5tLm0vFpeJSM6gCIR1DJMUDUgFWovmZoUujS6NL0+GYHTvROstQiMULNjOB1YuoXkTzIlpx9CLECxYvonvBnUUktzi5xcktToFFpHg4ahG6wx3YicmlyaXZpdmlxaVwTz2qSAlTZklAISI0mehScam4FB07sS7MmDInFiKG3sTs2IkxObKInKJjI2YvInvBxYsoXnDxItzi7BZntxh7/4niBWMu0aOchIgk6ClCKraMR6AQbRk3VGX1UER9J1ZicWlxaXUpJhDD5tLmaVHJiV4avE+PCJJFIBOFGD1BdGlyaXIppoqJLi2eFu1rWL00DJyJxREt2RXNowyFaB5lWBda2DGxOFKZhR2G1kOGJ6mnTahOBHYiBo5hcanAigQsjp1oTW3YFlrQMJHZLGiYeJJSmVi3VGAjYgRMdGl2aXZpcWlxqXmUYSVaDxkKEfPZxE7sLu1Ma5GCoTmXzuvdGlVnro75t3agEDEbGVrNDCsRa8vERhRPC9dow6MyTuDHCQ1QiGjJiapBT4PG0WIl6o5hYSEWlxaXVpfCwScKERPIRC8NY3OiF4y4eiKLCMfhiCIaUIghObo0ujS6FA4z0aXZ02JlMCxemplpWIiYdyZWongR4tLOtLai6xlXjtYBXRHBiJ4dZZydT8wuzS4tLkVfGKKSE13aXIr4d2InYrKZKMTu0k5pOqghhcORNUsIRvRka2AlIhiZWIjZpRimegw2NuDR0aUYDLqdHFhWmyXrAEMhwqCJnYhhOpFSHKkvZF9kTI56gjQQDVUVEVVIA3ZidinGsUADfEe0jzMqqYdQAytRXIrZc+KaHzJOBAxxmr6wEeH2E4UYXRo9LZzLEJXsOj/YvfZElyKm1QOygY1oVhgWx05Eq0/0bN2zYWIC1iM4UlnFhknP43KFw+gx3MBCzC5Fq08UIiIFw+oJsAPU87tsy60hhunERoTbT5SF7UiOSKv+gMPyiVhYJwoRQYMeEmbbxBtml8LtDTGODasnsEgMBWPwGsJ3JlaihQeGbaEc0ZFpO94UwB9w6Bt16cg4zV2oTwOwimDFWdiI4lJxaXepdjdwnGhFx0ZU/10oRLx/0MuNgUJMydGl2aXZpSU6urR6WjyNMGxemoYzC4sj0urbj6MnR1kYzDbDStR9y8LiSGXBzASmw/Ek9bQZGhKwE0smVkrjgUpmoBBDdKxEvN+YmB09W3KpVQeYXaoTSMQbFxwGT6zRsRJ1HVqYHT2buDJxaXdleJyit1MlWaNWRbPC8CRFffU9TjIrDIUIt59YiXhZM9GzFc9mbmToUhsXilnvAKLuIcdNZXCsxOTS5NLs0uzS4lI89THEY5+JmYhhOlGIaNSJLu2etrO+BV6iu7qCnVrUXV3B1WvUWaPgXVTUi+CCVSTqPew4QUYd8E4KDWXZrGbAFhwrERPIxEbsLu1Mi7PkiREJOrASrVGBaL6K11oVsxzea6F1KjSgDoYY87UAhYiCgfYMSqP4Yg+hDINL4Yga248r5eQoRPSxIfp4omfDkNYd1VhX06ov9lkTMYYM0ZITaVtDS050afe0vSzEi6iop6EFN54TMQVNFCK6OyMbHHFiJ6J9DdG+ejw2sBIlOLq0u7RT2o/g6FK8OptYHDsxNiKcdqIQs0uzpy2sbzcr1O1xXDrmN0XM9npEV/DMCTj8MBHhBBMrEROpIR7wTUQR+sDuwLwz0aXWvoZl1qEeNTgKsSXHTsSjvoku7Z4WAx1o65AeNNZgzQfEGJroCaz5OlCIxaUY85YWnmqI2X6iJ4CnWjZ4qmF3aWd14lEc+0qAa82FLrVWR9rIqtvyNZFVj25QdINsJbO0bhAeIi1kfWOLji4125BW3IruUvN1TZvM1w1dGtgBKbAlsaNaWJjWRqyhSzNbPWU2ny1qEzErH8BOrC6tbD5b1AwxjvWMtOIedmKnNCMM1bvgijvNhWVhsYi/AwsRe0hDDBG9Eq+2dOg9eMUVY9R78IpHORO7J8DY1NvxWjE29RZ7oBCDSzH36e14tVUEyipGgGFyKVpyYnFkHSp8HfXFcV488Oi2Ia22ma0tE09SaBA80IUVHdgXtoPShvV4YiPCHwzhynqTWbGTmIipbaK2Q0RauPJEl8KVJzaiuFRc2l3aKcXB3cJCRCUnelqMN70ArThri3oBOjZfgVI0n95ZjuUYb5wTUIgYQ8COhprYiWgoQ4wWQ4wWvfUcWIjZpYhp9c6y4v4tJjyGxmjRO8uKt7NR7yyrrRd6t1htawQrbGtkiNGi2Gy90Oi12c4n4Ek1GsoQQcNEIdrb7wPYiIgfJhbHTsQkNtGzVVdWXdpcWXNlzZWJKxPP1j1bZ7aA+Uxftjfcvxni1ijqo4+G86gYIMXyZYiGmliJ/XDERiHiZTk0JGAnWvMZNiJWsomeNnsCDBF9tt8stje0SgJts2JYiVZfQ5dafQtQFmbreSDm9YmVGA/H7Oga0PP64mWcv0fHSsS8PjE7CrF6turKmkubKxNXJq7MNmJN0fpCEZP5wkrEdGVothnm1erFbAPCwSdSijcNUe+HWjNPhdQ81bAQUd+JeflZs/oCEfpMpFSO5OjS4NLg0pgdXWpVN6xEzCUTPVv2bDY2IxC2ZXzVUBz7Mgj3DAtdCoMmQoN6Scf5w0SXwuXwIQdeJExEt0xkETY5TmSr27HQRCGW5OjS6mkxrxs219u8NJtW0h9/vH2zvrz57tfP79/rhzenT3H+9fubX959fv/p1zfffPrt48e3b/7n3cffkOg/v7z7hL9/ffd5/Oto3Peffhx/D4U/ffj4XumPt577uM4axiVintnDiHw6VYxZ7AslYaPk0E41HSO4P6moX6iI1yrGqW+bKkb0VKmixS80pGsNY6u22mG436WGrRkahpkZY39waUZ52Yz6z5qhZxKzN+S6N2SjougRk6kYgfhVJfq1hl6OVYk+TlVeNGNcmF+asXPuEYHQMUcYdFw798Y1xwnp6pGBcmnK1jfpFuMYIV6p2Jui8dgypdRrU153z/C6fz7eK0UuTdkoGcefyzvGQV2hiuFqX1iycdGxY1uNMTY1l/0aN7UQiexXyeVGY3xhR05XdjyqoeQ7GvKx+mOc0vYrDbpEXy8jvoqM+2Pv0fZlj8aNc+KG0VScemMcUj+uoSwNY4N6raFdaxgBxFKhC73rOPKXOjaTZyqrNUeoSw0jKHm8NbNwISqnMfZ1a6ZNp+ouelkyzmldR/hqRd1NwV0vVGaX9NPs2Y9bvnVaB77yrbSZPMcN96qFPs65rEXKL4/1VF4e63tLaqUlIteWbDx07FfW/DvuODatsfHQEeGvThkBfLo0ZavicBX5skHzxjUSDoatNcbe18daDY/rSLrNNh1jn3tTR+7U0dKljm2vSFijbWwd+2Wv5PzP6tDv7Bi41ZMtqT+ho682De0UeD2lowefzGN5XUe6XQ8GsuOs66YOCVxWTkHTMzrGSa0vTfnalu3sIQd9fWzGL/2jpG17MKjup2BhOP7jM7qHw+NA5E68URhCjtvQ446GGqih5n5Hgy+P437yTtw1TsqXhnGRcLmylf561FSPV6OmrYaHoqYaX4+aano1atq25oNRUy2vR021/qNR0xe+1dqVb9XNAj0O9VeDjuP769Wkblo0lk7XGLeVlzra8Xq80sLL8cpexUPxSkuvxytbHQ/GK3sdj8Ur2155MNZo7Z/V8Wi8stfxWLyy1fFgvPKwjnS7Hg/FK3sdj8UrOx2Pxivb2aPST+O4vb30D6m7hb76Qr+ZPaS9PHvIbrdTw2rSNi7vL1XsVqeQi58u5355CLhtjhY8ainXE3LfzIQxe9eeT3u+7tq9jkIXO5vypI7VtbFs3HSro/giV8rNepTqi9yR7+oo/99C+ZSOmoU6Srupo60zijiurO/qYHu0GO7paG7L2U+f09HYt2Pnc1cH/VRCuadDcqaOkm7qYEio30/f1cH26OHmeOk+XvrN8ZJwvTrDoHyvTcddBo/0ktwbc8n3oakcx70lqh3up+k6VA8hvHy2GHZ3TA8eLu5tqezbdgpP/2zL/qyDE8iRzoOuPF6RXtzZNxXZ6+DOIx0xb4zZLPxSeZ8r7YtZuX2lRF4/MdlZkwKjmBTaxs12d03V5/ba8qZJ4sZXu6y5rJ+ObuJonC9V7G7qj2N178DrsbtXklmRXDaLzF5JaZ1KpN1VknglWnr4G8zZxEN7JZX7y1w3C81fKOGMlndRxMPm1M3y/Rc14RuC3Dbr1V5Ji356EO/XhOa0FF9vk/OB4ZPmiLdJv62E+6qhRP4Gc3q/qUS4lchS7nax+AGRVLldEzastPR6m0i7PbMxTNMPXG8q6a6ky6Z38u6sP0ldU5v+Vs1TqPb1fL+9/igp+7Fquzxu2itJ/kLs/FzjKSWVj1daODYqtm1SIpfz1M/z/TNrYDniWgPLkTednPvf0j/l+Bv6Z6vk4f7p/4XG5WZ64M1ZpQRWRT8e3SjZPkHzpj1O89uf4qVSX78cCaW9ejsSyu5CIPCYVH9J4kbJpotLXEtPOW2XnlPBUVxPO/LnTMGXBdOU0+nkc0qan4O1nTHboLyVwqBcrs84Q93Ma5J4sSspXL+V3F1cJXyDOHflpV+76l6JuJLTy9EnlbCD9ddY3VSSsh8QlF1Ndu0aeb0q5wubr9t1d1HS/DJPn3Bf6di5SO5rJtKPva7u8kLbzGbp4JZaf4Gc64hP6Dh7yGmdKE9Ywjh6GNWuLdm+ouIG9DQH/alHNvNpasUfUZ2jtPqMEil0UjnvcJ5S0nkKnnrdKXmsQcL12dFWQ+VL63g9ecjuVKDxcrS36xuSv2hRPkRIct7aPNeizVtUdn27e5R78OxIwnFv2MvBmfC+jsCtuIxzqpv1YIg4dFz7x+7yKugvfefNU90Mu/2MfPitc0ybWGj7KIFnR/G80j25+vOdx9C3Wf33QaYwPjzu7sRHzsYgM+S7SuhqQ99dJfhlsyvcva0ke8y8Cbx3/uqn2L48PP4xEm83wyk0fCJ/4sObdCd/5KuyePpI44n80S+8jzv5+S4upjvtFxk0xfODtFv5+532L+y/01uOJ/L7PNXqa/lPi8cz9af/yC3/O38HV683N9shQB8Yo0HuqeBFUDjb8YyK1P1kot+rReHJ7RfHEk+pqP6gT/o9Q7hq6X9oc09F9g8kyy1DHt1qbl2bp6T6P57cUtH8XWLr8ZaK7s3Z4y0VjTfQLdc7CjpvSXq51Q79aIyX79WgerRcXjThnoJxbc1nqsf5WZQ8rCHwo5oWTnciX2mIuw+dQvSREWu8VYviR7qnJecZDdxdt7t14K52XBIfdzREnt8MbPes6K5BXtUQbtUhcvFqMR2v9sXp8cAzdWAY22K5Z0XKr/lD6O7V/RTGJTluqTi9fHxChb6+WEvGcXpc+5SK6m85zgclz6jgfeU4Mr5pCJ1ihNdyU0V2FTfbIjI2HHxujcc9I8vhl4ynAP1rFTHvJs3qMWLdvADfK8m+DudY7ilp4iebcqliu5Rz5zrwzlftzX9LwMB+S0OnFaXf0lATZ87zt0TPaODXGrc1PPS+OO6uiB5+YPw3fAq53QPl0+8COamQ9LiK0y+wqO2eCj4OHJNOvVQRd581+esGOT+F+5OKzX2zv1AqctxTUQPvy85vV55ScbiKdFMFt8a19js9Ev2EKoZyaw8UQ/J1oOZ7Kh67BI27Q9nHLkH3Kh66BD1evwLdqajC46Z6OgJ9qhbclcbY7nXqg0fCx80D4W/Hj+9++PD5i//j/A9V9vnDu+8/vp8//vTbpx9O//rr//6y/mX9H+m/fP75h/c//vb5vWrSf7P/KH388a+QxjAfa/Lx7ds3QX/O4+JxnN7E8XMaP4/prIr+mybuSd72nPTHmTaMtDV9+4dW9v8A",
      "brillig_names": [
        "add_lock_public_user"
      ]
    },
    {
      "name": "commit_private_user",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "Id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "src_receiver",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "timelock",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "dst_chain",
            "type": {
              "kind": "string",
              "length": 30
            },
            "visibility": "private"
          },
          {
            "name": "dst_asset",
            "type": {
              "kind": "string",
              "length": 30
            },
            "visibility": "private"
          },
          {
            "name": "dst_address",
            "type": {
              "kind": "string",
              "length": 90
            },
            "visibility": "private"
          },
          {
            "name": "randomness",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6418028854678020178": {
            "error_kind": "string",
            "string": "FundsNotSent"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "notify_created_nullifier_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "random",
        "decompose_hint",
        "lte_hint",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "commit_public_user",
      "is_unconstrained": true,
      "custom_attributes": [
        "internal",
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "dst_chain",
            "type": {
              "kind": "string",
              "length": 30
            },
            "visibility": "private"
          },
          {
            "name": "dst_asset",
            "type": {
              "kind": "string",
              "length": 30
            },
            "visibility": "private"
          },
          {
            "name": "dst_address",
            "type": {
              "kind": "string",
              "length": 90
            },
            "visibility": "private"
          },
          {
            "name": "Id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "src_receiver",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "timelock",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "516370165797458160": {
            "error_kind": "string",
            "string": "InvalidTimelock"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3559210201980528457": {
            "error_kind": "string",
            "string": "Function commit_public_user can only be called internally"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10870837545714573535": {
            "error_kind": "string",
            "string": "HTLCAlreadyExists"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "commit_public_user"
      ]
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "get_htlc_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "view",
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "key",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "Train::HTLC_Public",
            "fields": [
              {
                "name": "src_receiver",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "amount",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 128
                }
              },
              {
                "name": "token",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "hashlock_high",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 128
                }
              },
              {
                "name": "hashlock_low",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 128
                }
              },
              {
                "name": "secret_high",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 128
                }
              },
              {
                "name": "secret_low",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 128
                }
              },
              {
                "name": "ownership_hash_high",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 128
                }
              },
              {
                "name": "ownership_hash_low",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 128
                }
              },
              {
                "name": "timelock",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 64
                }
              },
              {
                "name": "claimed",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_htlc_public"
      ]
    },
    {
      "name": "is_contract_initialized",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "Id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "is_contract_initialized"
      ]
    },
    {
      "name": "lock_private_solver",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "Id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "hashlock",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "ownership_hash",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "timelock",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "randomness",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "dst_chain",
            "type": {
              "kind": "string",
              "length": 30
            },
            "visibility": "private"
          },
          {
            "name": "dst_asset",
            "type": {
              "kind": "string",
              "length": 30
            },
            "visibility": "private"
          },
          {
            "name": "dst_address",
            "type": {
              "kind": "string",
              "length": 90
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6418028854678020178": {
            "error_kind": "string",
            "string": "FundsNotSent"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "notify_created_nullifier_oracle_wrapper",
        "notify_created_note_oracle_wrapper",
        "random",
        "decompose_hint",
        "lte_hint",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "AAAAAAAEAAAAAAAAAAAAEgAAAAAAAAAQAAAAAAAAVgkAAAAA//////////8AHpaZK/vn4BI34FLi\nFsWvjIYujIO04bF8gJo+sTabfwcD/twE0Xe28aVwDovOMEKJXhX2iRpswk0oysNSgu1Bpg0MZqZw\nODv/skqr2qlrekpwaa8pZuvtEr77z2f73nxPDwsjwjzP5MtwU/8UKsegGM90qH4tHw5IDemxPEHp\nUbcUPUY26fg9VslQHZk3krb0knOQ4Iiov2CcHGYCJUat3wXjqXAfV1zdxaIFmWa0QW45V3O1RARx\nKEjMbLJSJALXG6VP4rQTKio2wLFvliIeFDGDBPfTcGsqCRdeXAfXHaogO4+TVwb7efzyVndeglaK\nI48wam+CUy+fZkE31bgc6gBSkFZkc6fUQUdhqdA7daZKdruDcpGyR9DOq5C1M3C2FvJB4rCF0sk8\nvHnqYeWpzemMTh9jloVgdYL8Sg3wIRcRNNWu0hpzggD3PDAkVtd47wolimI95GD93JeRV2/6HiOU\nipll8R91nTyK2A1l17R1oqTHuxk41kEbl/Th/X2tEabVvIpfVK1Cmo0sICvRD9kVavxZhNfishhT\njnOjarMEaHGye2msWK1jh5dtDtpyAx4+e0Dduaitynb2eIOYxRh/VfVGtLRhV/a+BFuVRaXoytaQ\noB//6iBpJJwKMw7rLrj+HbyrMZ0B+GxjgUpZfwUg5X3FTj7CJv4+zvYKIRkcCfm9ku5KvabyNAMX\nu+Ejuvd5FEOgDEY+uZ+6wF42ggDvF4Wco+a7/FY5o5iMufARNLy6oOBMyruVk3gNgIf+BKmNsYCX\n7UZKJzeEGLhkYRqx1Fbl/fYpUdKL0dtGyJ0lWvh9D8WexTCo1HnZ6zjpkFIJglF0DCvNYovlXxdS\n9R96I4J44CbLcGUqbPF3gYIrtHtc2dALZ18OHjbA653SF8a3h6WDJVqLyibRsYBgNNr8vLQdXghY\neO2tMPNmi/srymGJA934yEhPlQWxaMvG1LFkkoo8SCziPyiv4dgr6gzoSLgDKRC2WBAskfLbk77p\nmxuWvmwv9ro4pu+MSZKlAlrlnB+NLoom/p2jSKRqYr4EDm70EqpL9lLU3HD9dSQvtIcftX0sD4E6\nrvAHhtKljWQ6Go00n4uO4OhElAR7iBKdOT8Pg0eBFV4XwUBf8FyllLjWWuPekwpGMYESKSjaFZfi\nYOHwudc+dkUpD2RqLXtYvmcJD9s0vGjNta6CxpkUgtWL5TPVGGl9CQ7LfqEaoAEV0C4/qLoZxEEm\nee/jhAlghYYN2Sd4aD9mTO4u9Tr5MoiHckNPdzng9n0Ge/O3ERGJRtUP9kO8yOYukfzNPXBG7BtS\n6smwI9VCOAJDkNoJ7aJg7Fck1fYl1f3yLHmuhadCZDfHOAccXqrmusPqphWRSSEZx1FfJnpL6asp\nj+kqXOVZ2mUvv6kaLW1B6E01D06J1jSZGkWdRrVJT0hBlXsJDwE86XqZ0DjESypBav4HNs1f1iPW\nkC9gpEKMnCwgX7uR3Vq29MbMsrc+KmUGyBY7pwjesGE6+xAq8Av2+OtTGVk9u+BoAz9X55SVAMC9\nDZM9KndU+86cxbKmbmumJABJ+ekXHdtf4JX9bxEnQjsZM+u1ZFjqVc3AWQX37YqVaFtUR+oksSYy\nVHnMZvVuSgEBqXkhcV3okwOOMlLbsdYGxVt5doJMj35y+2EPHlD/Hms/yLdFf2V75cP8ddmYt6w1\nDBboFaBPks1l1m9ZrGMrPQJKCoS7B0HP+mjzLPXfLuVImjj3AxShj4BDANAYzRvhvwDG3yzjddpv\ncg3aTKXNLyFpX6yMSu7+ZVv1FJEgK886gmtAQK7sPIyhO1k1UutIO6aoIdxqGOiHbsgJylYe0ltD\ne6Ims6DDiW5OcTk+uNr5W8Ht5DXtkfB+5TAVqwtaDT7C5fKzBDrVkn917iJOe4uwdsAdnRXmldtJ\nYoR5L0k+SqJepx+Q/5V+KqqeomSYTxXLfqssT2ml2Ailb00MDfwyFqfkTkJc7/GGGfQrfw/rg2SO\nEbH+DYvGtgxvIQt+Bww1reRIgasMq+ppQb4/zeTE4IFhvnl5SCKu+7P2F0xNqsxv6+gtiDGpBETv\nEX32GkvxinRGtU2OzdDlJyENPQ9wXJw7Qm4veGR5CujPFMTyBusHozGX/1z2u6wLrwcDm+cLVXtv\nDU1Z+xKAoZlYPQqQ5tVT5L1kSbWO9QehChGFSw0wrqddreiukl/tbL8F77PitlsEvecaM00v6zMA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAACGvY2L6d3RK8HL4R0WW7VYQI1hvTSVN0eiPnGFPfys18urTPBDHNgj/ZwHhjaE41hGGLI\nWfrR9k0O1WcFP5hKdADENyb3W2/aDeIs4ODfq2vMegX/lalrKJQkxfczZw2WL5tuC04sAZaN5cMk\ngqp9HQoJ1xeOyTuteFj5bmTwtI0dWKphxkrVIgQ9ecSAIhnlW6GXUa3+bDYyTT+2wtoJiS18GKk8\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "lock_public_solver",
      "is_unconstrained": true,
      "custom_attributes": [
        "internal",
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "Id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "hashlock",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "ownership_hash",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "timelock",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "dst_chain",
            "type": {
              "kind": "string",
              "length": 30
            },
            "visibility": "private"
          },
          {
            "name": "dst_asset",
            "type": {
              "kind": "string",
              "length": 30
            },
            "visibility": "private"
          },
          {
            "name": "dst_address",
            "type": {
              "kind": "string",
              "length": 90
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "516370165797458160": {
            "error_kind": "string",
            "string": "InvalidTimelock"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10870837545714573535": {
            "error_kind": "string",
            "string": "HTLCAlreadyExists"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "15001264570739363109": {
            "error_kind": "string",
            "string": "Function lock_public_solver can only be called internally"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "lock_public_solver"
      ]
    },
    {
      "name": "process_message",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "message_ciphertext",
            "type": {
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec",
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 17,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "message_context",
            "type": {
              "kind": "struct",
              "path": "aztec::messages::processing::message_context::MessageContext",
              "fields": [
                {
                  "name": "tx_hash",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "unique_note_hashes_in_tx",
                  "type": {
                    "kind": "struct",
                    "path": "std::collections::bounded_vec::BoundedVec",
                    "fields": [
                      {
                        "name": "storage",
                        "type": {
                          "kind": "array",
                          "length": 64,
                          "type": {
                            "kind": "field"
                          }
                        }
                      },
                      {
                        "name": "len",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "first_nullifier_in_tx",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "recipient",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "process_message"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "516370165797458160": {
            "error_kind": "string",
            "string": "InvalidTimelock"
          },
          "772057049813214347": {
            "error_kind": "string",
            "string": "HTLCNotExists"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2570651705007895968": {
            "error_kind": "string",
            "string": "HashlockNotMatch"
          },
          "2722406262643068352": {
            "error_kind": "string",
            "string": "HashlockAlreadySet"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3559210201980528457": {
            "error_kind": "string",
            "string": "Function commit_public_user can only be called internally"
          },
          "3564161243949231814": {
            "error_kind": "string",
            "string": "Function refund_public can only be called internally"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6012086182631426650": {
            "error_kind": "string",
            "string": "NotAnOwner"
          },
          "6144404149669079610": {
            "error_kind": "string",
            "string": "AlreadyClaimed"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "9323748002447105156": {
            "error_kind": "string",
            "string": "NotPassedTimelock"
          },
          "10870837545714573535": {
            "error_kind": "string",
            "string": "HTLCAlreadyExists"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15001264570739363109": {
            "error_kind": "string",
            "string": "Function lock_public_solver can only be called internally"
          },
          "16870384257694633552": {
            "error_kind": "string",
            "string": "Function add_lock_public_user can only be called internally"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17814817983036354427": {
            "error_kind": "string",
            "string": "Function redeem_public can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "redeem_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "Id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "ownership_key",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "AAAAAAAEAAAAAAAAAAAAEgAAAAAAAAAQAAAAAAAAVgkAAAAA//////////8AEG+7k3ktZ/vRHafZ\nAUvMv5jP0GOXMkoeHxPnDnYO/GkaJbdu+LcaeJNsGlQZSFKXHxe0gp++xACLYjxIYb3GLhNAvEU0\n6h81fkQueVrSiaPp2fGPxZpwf/Ufj7MgNEXgLSLTWUg4q720smZSVQAhauJKchodHk10JQB8v8lw\nL90lSIDRTKb+aK+CKB6nZV0yBB8DWDD3BD3zA/55cC7+miJFqe0z/NVKL5ttU14wdvmm1FG0VJbN\nhgpnhmf6K0KYKTle0965z1kD4J/955segFbZ3twL6/1R30I+EVB0d9UfhRKq4hd9SOhpHWiIv3n7\n5HS2mWnq7QX+5HCzF73laCaJTEyMlhxy9ZamxAH/73BH3gGeE+tbhJJMSdWjDgFzJSN04h/raTfw\nSSnYIY8OBhD9Vw6J+eGmxP1lM9XURwYOL2SKphyQNzFOrGSbV0V6i/BVDs4xU7w5FhJK6OfMYC7z\ncWy2rlWIY2lDWkJgOfLJOW6p9QBukygV3VFV1pikEabVvIpfVK1Cmo0sICvRD9kVavxZhNfishhT\njnOjarMEaHGye2msWK1jh5dtDtpyAx4+e0Dduaitynb2eIOYxSmMMxH8kXD5LelAsEKquZDVPGo7\nJjOc2mtz35IIMUFZB7BfQIphKEclkBa5IErkvzdTfrGWsFwdmPpRAWqbrLsLuTys+twJ59nruGuX\nHIYmYXii3wC2J1yseqhDM10bpBW2csoj07o5otQSQWdWF5CKDtuRA80AH0mNu7FJCeKrFD9udPyu\n6iYTYSy6xZL9WG9DNAviTWrLm2eyg8fX8IYnl+OOtT1y0Qr5UOx4kvO56jWmZcFbsJVDJh2biOGr\nEyHrSJuRmKhkLL92LlSOA5ve52T8+85x9jwkt2+sZv9oEf1BtfmTbZMquuTG6TPg05wk6o4uDu5w\nKlMm81nJR8AUoX18ClXS1F7o7fbsFlwRPSgrmEfVYv1BQCIOR+GCrxpw0tC/U/KBmNxua015bsn0\nE4YWuRKVxKct3D6sKlhhAMcMZtkc6E9o/bnM9wIKX1XZUP4FAW30ce1Luc6NJuIi7ckvAtfLdhDc\nLP6P/3O2lt7ehFC8dE+b2OBDcJ8CTh/rCmLx9HNXgJJiTmdOK7hh0mM5KItz91m+YtThL6yTFMK/\n4lQcFfhbXKKDn4G5atxzY6V9eelog26Sa/n4zBosHRYbVNKQ7AzRaUXMO1v9oIbb66wl5g5VkZjt\ngzfX4iGI35TDnyhHGpsTPjbQPLugRE9jaNfTk8sAJSubwL5bDwjvsPcsE4G7oo1LBTPZBtocQLrR\nT2nql4tIV1+/DeglXu6oBrd/BHrQuCjsIqR8F/+tcaAmQLD3a5U6W3sdKSOBh0Q6uA6BbbogPfhl\n8ytqxK/MKAGfBOE+T5JqZHbdEtpEv7uWS3p9vTpeljspUKfPdCPvicxXL45XLR6nXMMSTzaJbWca\n+NnB96FjLs7rcJ3ninBdZPciYT/BHAjlHivx39BX5phobgi4VZfAX3REGxfa1Lun/zzcRJ9zOBaq\nKUTQD7NFq+j34p7CYsf47gMVELLensY7GytJL7ByYqEqmXdoSgdScdFlipBJlOX5XLLxtkh72TvJ\nE0IQ3KFG6BdX4a356ngeSAWb+3/LWQYBjN5YcRF1yQjsEFNnPHs1FtV0aI+WX01ZOz45o0fCgyAd\nGjhiuufV3nFIr0sYC70mn8tiWnUw991hAZtNvHbUeZ6LILPhoprmtrxp0z62XxAKwQcNP4YYXmoq\nwh4eIqHj1Hsyrk+4Mf2DDeROV2/AGSnAGQ64W3iATng+8dlSztCISQd8caI5dEWETygI4i8WK4Rd\nIvCZ/BkRfL/Z8Ti4vUPjaL8ic4GgcF3Pmt6/awrcicSNdbVxY29bvrSoBvb0WWICMBtq5OsOu+rd\nIDNABm8oE1dI8RljHD/gf6nXAANOPidFTvmStL+EuXuqdHEuJXg1Ud9QwATsfNH03Ys7ZKZvKsSX\nm2XlZWjFoxsU7Rj3bPDO7MtHmN50GuibZOglj4RHfBtiVlpVm6e7OIMuLSmftoZ40BULzFsW3IJS\nNT1D+nDpkjnBwcZ+JxoO6sUV06xaGZq7dJM6TvyYxZsoFO3nzSfa7QDDPBKGC8SwRi041tS6Hkdj\np07NsRyh80aWgMJw5VFRU0RZL1kYj6dlEts56JKCazJhDuCCUeAF/OkXwNXcoBlHfFL2B1MythIA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAACCfFdYKZ0SzDjznKUMG2838xY58pdrCOIPXMOwFWRRbcfTN5EA5M46kka4HJC88hgzScN\nwT9cp6VgPgbk4Ts0rQDENyb3W2/aDeIs4ODfq2vMegX/lalrKJQkxfczZw2WL5tuC04sAZaN5cMk\ngqp9HQoJ1xeOyTuteFj5bmTwtI0dWKphxkrVIgQ9ecSAIhnlW6GXUa3+bDYyTT+2wtoJiS18GKk8\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "redeem_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "Id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "ownership_key",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "772057049813214347": {
            "error_kind": "string",
            "string": "HTLCNotExists"
          },
          "2570651705007895968": {
            "error_kind": "string",
            "string": "HashlockNotMatch"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6012086182631426650": {
            "error_kind": "string",
            "string": "NotAnOwner"
          },
          "6144404149669079610": {
            "error_kind": "string",
            "string": "AlreadyClaimed"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17814817983036354427": {
            "error_kind": "string",
            "string": "Function redeem_public can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "redeem_public"
      ]
    },
    {
      "name": "refund_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "Id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                          "fields": [
                            {
                              "name": "recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "content",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log_hash::LogHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "length",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "length": 20,
            "item_types": []
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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bUe2HXnnYNs52HYOtp2Dbedg2znYdg62nYNt52DbOdh2Dradg23nYNs52HYOtp2Dbedg2znYdg62nYNt52DbOdh2Dradg33nYN852HcO9p2Dfedg3znYdw72nYN952DfOdh3Dvadg33nYN852HcO9p2Dfedg3znYdw72nYN952DfOdh3Dvadg33nYN852HcO9p2Dfedg3znYdw72nYN952DfOdh3Dvadg33nYN852HcO9p2Dfedg3znYRw7aNaBu4A2yQTfYhrahLxg5OKFs2JFlR5YdWXbkkYNWBtiGtqEvGDk4oWygDXUDb5ANO7LuyLoj645sO7LtyLYj245sO7LtyLYj245sO7LtyG1Hbjty25Hbjtx25LYjtx257chtR247ct+R+47cd+S+I/cdue/IfUfuO3LfkfuKXK7rCipBFFSDOEiCNMiCWlBolNAooVFCo4RGCY2RkyZOGmRBQ6M59U0jMReVIAqqQRwkQRpkQaFBoVFDo4ZGDY0aGjU0amjU0KihUUOjhgaHBocGhwaHBocGhwaHBocGhwaHhoSGhIaEhoSGhIaEhoSGhIaEhoSGhoaGhoaGhoaGhoaGhoaGhoaGhoaFhoWGhYaFhoWGhYaFhoWGhYaFRguNFhotNFpotNBoodFCo4VGC40WGj00emj00Oih0UOjh0YPjR4aPTT61ijXFVSCKKgGcZAEaZAFtaDQKKFRQqOERgmNEholNEpolNCIPC+R5yXyvESel8jzEnleIs9L5HmJPC+R5yXyvESel8jzEnleIs9L5HmJPC+R5yXyvESel8jzEnleIs9L5HmJPC+R5yXyvESel8jzEnleIs9L5HmJPC+R5yXyvESel8jzEnleIs9L5HmJPC+R5yXyvESel8jzEnleIs9L5HmJPC+R5yXyvESel8jzEnleIs9L5HmJPC+R5yXyvESel8jzEnleIs9L5HmJPC+R5yXyvESel8jzEnleIs9L5HmJPC+R5yXyvESel8jzEnleIs9L5HmJPC+R5xR5TpHnFHlOkecUeU6R5xR5TpHnFHlOkecUeU6R5xR5TpHnFHlOkecUeU6R5xR5TpHnFHlOkecUeU6R5xR5TpHnFHlOkecUeU6R5xR5TpHnFHlOkecUeU6R5xR5TpHnFHlOkecUeU6R5xR5TpHnFHlOkecUeU6R5xR5TpHnFHlOkecUeU6R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",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "get_note_internal",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "call_private_function_internal",
        "load",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "refund_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "Id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3564161243949231814": {
            "error_kind": "string",
            "string": "Function refund_public can only be called internally"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6144404149669079610": {
            "error_kind": "string",
            "string": "AlreadyClaimed"
          },
          "9323748002447105156": {
            "error_kind": "string",
            "string": "NotPassedTimelock"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17595253152434889169": {
            "error_kind": "string",
            "string": "offset too large"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "refund_public"
      ]
    },
    {
      "name": "sync_private_state",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3095323350861740601": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "11418088424205762236": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_private_state"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000001"
            },
            {
              "kind": "string",
              "value": "HTLC_Private"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Train"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "contracts_private",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "contracts_public",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "Id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hashlock",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "timelock",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  }
                ],
                "kind": "struct",
                "path": "Train::add_lock_private_user_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::add_lock_private_user_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "Id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hashlock",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "timelock",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  }
                ],
                "kind": "struct",
                "path": "Train::add_lock_public_user_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::add_lock_public_user_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "Id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "src_receiver",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "timelock",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "dst_chain",
                    "type": {
                      "kind": "string",
                      "length": 30
                    }
                  },
                  {
                    "name": "dst_asset",
                    "type": {
                      "kind": "string",
                      "length": 30
                    }
                  },
                  {
                    "name": "dst_address",
                    "type": {
                      "kind": "string",
                      "length": 90
                    }
                  },
                  {
                    "name": "randomness",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Train::commit_private_user_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::commit_private_user_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "dst_chain",
                    "type": {
                      "kind": "string",
                      "length": 30
                    }
                  },
                  {
                    "name": "dst_asset",
                    "type": {
                      "kind": "string",
                      "length": 30
                    }
                  },
                  {
                    "name": "dst_address",
                    "type": {
                      "kind": "string",
                      "length": 90
                    }
                  },
                  {
                    "name": "Id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "src_receiver",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "timelock",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "Train::commit_public_user_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::commit_public_user_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Train::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Train::get_htlc_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "src_receiver",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "hashlock_high",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "hashlock_low",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "secret_high",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "secret_low",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "ownership_hash_high",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "ownership_hash_low",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "timelock",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "claimed",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                ],
                "kind": "struct",
                "path": "Train::HTLC_Public"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::get_htlc_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "Id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Train::is_contract_initialized_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::is_contract_initialized_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "Id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hashlock",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "ownership_hash",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "timelock",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "randomness",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "dst_chain",
                    "type": {
                      "kind": "string",
                      "length": 30
                    }
                  },
                  {
                    "name": "dst_asset",
                    "type": {
                      "kind": "string",
                      "length": 30
                    }
                  },
                  {
                    "name": "dst_address",
                    "type": {
                      "kind": "string",
                      "length": 90
                    }
                  }
                ],
                "kind": "struct",
                "path": "Train::lock_private_solver_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::lock_private_solver_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "Id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hashlock",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "ownership_hash",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "timelock",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "dst_chain",
                    "type": {
                      "kind": "string",
                      "length": 30
                    }
                  },
                  {
                    "name": "dst_asset",
                    "type": {
                      "kind": "string",
                      "length": 30
                    }
                  },
                  {
                    "name": "dst_address",
                    "type": {
                      "kind": "string",
                      "length": 90
                    }
                  }
                ],
                "kind": "struct",
                "path": "Train::lock_public_solver_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::lock_public_solver_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "message_ciphertext",
                    "type": {
                      "fields": [
                        {
                          "name": "storage",
                          "type": {
                            "kind": "array",
                            "length": 17,
                            "type": {
                              "kind": "field"
                            }
                          }
                        },
                        {
                          "name": "len",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::collections::bounded_vec::BoundedVec"
                    }
                  },
                  {
                    "name": "message_context",
                    "type": {
                      "fields": [
                        {
                          "name": "tx_hash",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "unique_note_hashes_in_tx",
                          "type": {
                            "fields": [
                              {
                                "name": "storage",
                                "type": {
                                  "kind": "array",
                                  "length": 64,
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              },
                              {
                                "name": "len",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 32
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "std::collections::bounded_vec::BoundedVec"
                          }
                        },
                        {
                          "name": "first_nullifier_in_tx",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "recipient",
                          "type": {
                            "fields": [
                              {
                                "name": "inner",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::messages::processing::message_context::MessageContext"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Train::process_message_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::process_message_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "Id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "secret",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "ownership_key",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "Train::redeem_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::redeem_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "Id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "secret",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "ownership_key",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "Train::redeem_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::redeem_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "Id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Train::refund_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::refund_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "Id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Train::refund_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::refund_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Train::sync_private_state_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Train::sync_private_state_abi"
        }
      ]
    }
  },
  "file_map": {
    "101": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        authwits::AUTHWIT_TYPES,\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_private_state = generate_sync_private_state();\n    let process_message = generate_process_message();\n    generate_authwit_exports();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n        $process_message\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided note nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(note_nonce).into()\n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `note_nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                note_nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_authwit_exports() {\n    let authwits = AUTHWIT_TYPES.values();\n    authwits.for_each(|(s): TypeDefinition| { s.add_attribute(\"abi(authwits)\"); });\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n\ncomptime fn generate_process_message() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // TODO(#15012): Here we use PRIVATE_LOG_CIPHERTEXT_LEN for message ciphertext length. Fix message vs log naming.\n    quote {\n        #[$utility]\n        unconstrained fn process_message(\n            message_ciphertext: BoundedVec<Field, aztec::protocol_types::constants::PRIVATE_LOG_CIPHERTEXT_LEN>,\n            message_context: aztec::messages::processing::message_context::MessageContext,\n        ) {\n            aztec::messages::discovery::process_message::do_process_message(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n                message_ciphertext,\n                message_context,\n            );\n        }\n    }\n}\n"
    },
    "102": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::{compute_fn_selector, size_in_fields};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault, panic};\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let seen_selectors =\n        &mut UHashMap::<Field, Quoted, BuildHasherDefault<Poseidon2Hasher>>::default();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n        let fn_name = function.name();\n\n        // Since function selectors are computed as the first 4 bytes of the hash of the function signature,\n        // it's possible to have collisions. With the following check, we ensure it doesn't happen within\n        // the same contract.\n        if seen_selectors.contains_key(selector) {\n            let existing_fn = seen_selectors.get(selector).unwrap();\n            panic(\n                f\"Public function selector collision detected between functions '{fn_name}' and '{existing_fn}'\",\n            );\n        }\n        seen_selectors.insert(selector, fn_name);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index: &mut u32 = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "105": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_array, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_public, is_fn_view,\n    size_in_fields,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else if is_fn_public(f) {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    } else {\n        if is_void {\n            create_utility_void_stub(f)\n        } else {\n            create_utility_stub(f)\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n    let params_num_fields =\n        fn_parameters.fold(0, |acc, (_, typ)| acc + crate::macros::utils::size_in_fields(typ));\n\n    let serialized_args_index_name = quote { serialized_args_index };\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args = [0;2];\n    // let mut serialized_args_index = 0;\n    // let target_address_serialized = aztec::protocol_types::traits::Serialize::serialize(target_address)\n    // for i in 0..target_address_serialized.len() {\n    //    serialized_args[serialized_args_index] = target_address_serialized[i];\n    //    serialized_args_index += 1;\n    // }\n    // serialized_args[serialized_args_index] = fee_juice_limit_per_tx as Field\n    // serialized_args_index += 1;\n    // ```\n    let serialized_args_array_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_NAME = [0; $params_num_fields];\n            let mut $serialized_args_index_name: u32 = 0;\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append =\n                add_to_field_array(SERIALIZED_ARGS_NAME, serialized_args_index_name, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_array_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n"
    },
    "106": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "109": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any. Note that the message\n    // discovery call syncs private events as well. We do not sync those here if there are no notes because we don't\n    // have an API that would access events from private functions.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process or they may be used to sync private events from TypeScript\n    // (`sync_private_state` function gets invoked by PXE::getPrivateEvents function).\n    let message_discovery_call = create_message_discovery_call();\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n\n    fn_abi\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "111": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _, _)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ, _) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "112": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ, _) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "114": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::{debug_log, debug_log_format}};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod private_events;\npub mod private_notes;\npub mod process_message;\n\nuse crate::{\n    messages::{\n        discovery::{private_notes::MAX_NOTE_PACKED_LEN, process_message::do_process_message},\n        processing::{\n            get_private_logs, pending_tagged_log::PendingTaggedLog,\n            validate_enqueued_notes_and_events,\n        },\n    },\n    utils::array,\n};\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, note nonce, storage slot and note\n/// type ID and attempts to compute its note hash (not hashed by note nonce nor siloed by address) and inner nullifier\n/// (not siloed by address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, note_nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(note_nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* note nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    // First we process all private logs, which can contain different kinds of messages e.g. private notes, partial\n    // notes, private events, etc.\n    let mut logs = get_private_logs(contract_address);\n    logs.for_each(|i, pending_tagged_log: PendingTaggedLog| {\n        debug_log_format(\n            \"Processing log with tag {0}\",\n            [pending_tagged_log.log.get(0)],\n        );\n\n        // We remove the tag from the pending tagged log and process the message ciphertext contained in it.\n        let message_ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n        do_process_message(\n            contract_address,\n            compute_note_hash_and_nullifier,\n            message_ciphertext,\n            pending_tagged_log.context,\n        );\n        logs.remove(i);\n    });\n\n    // Then we process all pending partial notes, regardless of whether they were found in the current or previous\n    // executions.\n    partial_notes::fetch_and_process_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    // Finally we validate all notes and events that were found as part of the previous processes, resulting in them\n    // being added to PXE's database and retrievable via oracles (get_notes) and our TS API (PXE::getPrivateEvents).\n    validate_enqueued_notes_and_events(contract_address);\n}\n"
    },
    "115": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub note_nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given note nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    note_nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Found valid nonces for a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        note_nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(note_nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        note_nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let note_nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(note_nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash = compute_unique_note_hash(\n            note_nonce,\n            compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash),\n        );\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, note_nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.note_nonce, note_and_data.note_nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == first_note_and_data.note_nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == second_note_and_data.note_nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "116": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::{\n            enqueue_note_for_validation, get_pending_partial_notes_completion_logs,\n            log_retrieval_response::LogRetrievalResponse,\n        },\n    },\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for logs that would result in the completion of pending partial notes, ultimately resulting in the notes\n/// being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    // Each of the pending partial notes might get completed by a log containing its public values. For performance\n    // reasons, we fetch all of these logs concurrently and then process them one by one, minimizing the amount of time\n    // waiting for the node roundtrip.\n    let maybe_completion_logs =\n        get_pending_partial_notes_completion_logs(contract_address, pending_partial_notes);\n\n    // Each entry in the maybe completion logs array corresponds to the entry in the pending partial notes array at the\n    // same index. This means we can use the same index as we iterate through the responses to get both the partial note\n    // and the log that might complete it.\n    assert_eq(maybe_completion_logs.len(), pending_partial_notes.len());\n\n    maybe_completion_logs.for_each(|i, maybe_log: Option<LogRetrievalResponse>| {\n        // We clear the completion logs as we read them so that the array is empty by the time we next query it.\n        // TODO(#14943): use volatile arrays to avoid having to manually clear this.\n        maybe_completion_logs.remove(i);\n\n        let pending_partial_note = pending_partial_notes.get(i);\n\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log plaintext to get\n            // the complete packed content.\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                log.log_payload,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            // TODO(#11627): is there anything reasonable we can do if we get a log but it doesn't result in a note\n            // being found?\n            if discovered_notes.len() == 0 {\n                panic(\n                    f\"A partial note's completion log did not result in any notes being found - this should never happen\",\n                );\n            }\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                enqueue_note_for_validation(\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    discovered_note.note_nonce,\n                    complete_packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    log.tx_hash,\n                    pending_partial_note.recipient,\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "117": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/discovery/private_events.nr",
      "source": "use crate::{\n    event::event_selector::EventSelector,\n    messages::{encoding::MAX_MESSAGE_CONTENT_LEN, processing::enqueue_event_for_validation},\n    prelude::AztecAddress,\n    utils::array,\n};\nuse protocol_types::{\n    constants::GENERATOR_INDEX__EVENT_COMMITMENT, hash::poseidon2_hash_with_separator_bounded_vec,\n    traits::FromField,\n};\n\n/// The number of fields in a private event message content that are not the event's serialized representation\n/// (1 field for randomness).\nglobal PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of an event's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, randomness, etc.).\npub global MAX_EVENT_SERIALIZED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN;\n\npub unconstrained fn process_private_event_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n) {\n    // In the case of events, the msg metadata is the event selector.\n    let event_type_id = EventSelector::from_field(msg_metadata as Field);\n\n    assert(\n        msg_content.len() > PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n        f\"Invalid private event message: all private event messages must have at least {PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private event message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN\",\n    );\n\n    let serialized_event_with_randomness = msg_content;\n\n    let event_commitment = poseidon2_hash_with_separator_bounded_vec(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n\n    // Randomness was injected into the event payload in `emit_event_in_private_log` but we have already used it\n    // to compute the event commitment, so we can safely discard it now.\n    let serialized_event = array::subbvec(\n        serialized_event_with_randomness,\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n    );\n\n    enqueue_event_for_validation(\n        contract_address,\n        event_type_id,\n        serialized_event,\n        event_commitment,\n        tx_hash,\n        recipient,\n    );\n}\n"
    },
    "118": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::enqueue_note_for_validation,\n    },\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\n// See the call to `std::static_assert` below to see what's in these fields.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        enqueue_note_for_validation(\n            contract_address,\n            storage_slot,\n            discovered_note.note_nonce,\n            packed_note,\n            discovered_note.note_hash,\n            discovered_note.inner_nullifier,\n            tx_hash,\n            recipient,\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "119": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/discovery/process_message.nr",
      "source": "use crate::messages::{\n    discovery::{\n        ComputeNoteHashAndNullifier, partial_notes::process_partial_note_private_msg,\n        private_events::process_private_event_msg, private_notes::process_private_note_msg,\n    },\n    encoding::decode_message,\n    encryption::{aes128::AES128, log_encryption::LogEncryption},\n    msg_type::{\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n    },\n    processing::message_context::MessageContext,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    constants::PRIVATE_LOG_CIPHERTEXT_LEN,\n    debug_log::{debug_log, debug_log_format},\n};\n\n/// Processes a message that can contain notes, partial notes, or events.\n///\n/// Notes result in nonce discovery being performed prior to delivery, which requires knowledge of the transaction hash\n/// in which the notes would've been created (typically the same transaction in which the log was emitted), along with\n/// the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier` function. Once\n/// discovered, the notes are enqueued for validation.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\n///\n/// Events are processed by computing an event commitment from the serialized event data and its randomness field, then\n/// enqueueing the event data and commitment for validation.\npub unconstrained fn do_process_message<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    message_ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n    message_context: MessageContext,\n) {\n    let message = AES128::decrypt_log(message_ciphertext, message_context.recipient);\n\n    // The first thing to do after decrypting the message is to determine what type of message we're processing. We\n    // have 3 message types: private notes, partial notes and events.\n\n    // We decode the message to obtain the message type id, metadata and content.\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(message);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            message_context.tx_hash,\n            message_context.unique_note_hashes_in_tx,\n            message_context.first_nullifier_in_tx,\n            message_context.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        process_private_event_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n            message_context.tx_hash,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            let body = if type1 == type2 {\n                quote { self }\n            } else if type1 == quote { bool } {\n                quote { self != 0 }\n            } else {\n                quote { self as $type1 }\n            };\n\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        $body\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "120": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\npub global MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "121": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{\n        GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2,\n        PRIVATE_LOG_CIPHERTEXT_LEN,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) != 0;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "128": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n        offchain_messages::emit_offchain_message,\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n    utils::{array::subarray::subarray, remove_constraints::remove_constraints},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash,\n    address::AztecAddress,\n    constants::{PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_SIZE_IN_FIELDS},\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        // Regardless of the original note size `N, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_raw_note_log(encrypted_log, length, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log = unsafe {\n            remove_constraints(|| compute_note_log(note, storage_slot, recipient, sender))\n        };\n        // Regardless of the original note size `N`, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_raw_note_log(encrypted_log, length, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note_unconstrained`, except the note is emitted as an offchain message instead of a\n/// private log.\n///\n/// Like `encode_and_encrypt_note_unconstrained`, this function uses unconstrained encryption. The sender can set any\n/// message contents, potentially preventing recipient decryption and resulting in note loss. Since offchain messages\n/// inherently lack delivery guarantees, constrained encryption provides no benefit and is not offered.\n///\n/// While delivery is not guaranteed, message integrity is still protected via cryptographic commitments in the note\n/// hash tree. For guaranteed delivery, use `encode_and_encrypt_note` with private logs instead. See\n/// `messages::offchain_message::emit_offchain_message` for more details on delivery guarantees.\npub fn encode_and_encrypt_note_and_emit_as_offchain_message<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log = unsafe {\n            remove_constraints(|| compute_note_log(note, storage_slot, recipient, sender))\n        };\n\n        // Remove the tag from the log\n        // TODO: This is a tech debt. We should refactor this file such that the log is by default computed without\n        // the tag.\n        let message_ciphertext: [_; PRIVATE_LOG_CIPHERTEXT_LEN] = subarray(encrypted_log, 1);\n\n        emit_offchain_message(message_ciphertext, recipient);\n    }\n}\n"
    },
    "129": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr",
      "source": "use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n"
    },
    "137": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/processing/mod.nr",
      "source": "pub(crate) mod event_validation_request;\npub mod message_context;\npub(crate) mod note_validation_request;\npub(crate) mod log_retrieval_request;\npub(crate) mod log_retrieval_response;\npub(crate) mod pending_tagged_log;\n\nuse crate::{\n    capsules::CapsuleArray,\n    event::event_selector::EventSelector,\n    messages::{\n        discovery::{\n            partial_notes::DeliveredPendingPartialNote, private_events::MAX_EVENT_SERIALIZED_LEN,\n            private_notes::MAX_NOTE_PACKED_LEN,\n        },\n        processing::{\n            log_retrieval_request::LogRetrievalRequest,\n            log_retrieval_response::LogRetrievalResponse,\n            note_validation_request::NoteValidationRequest, pending_tagged_log::PendingTaggedLog,\n        },\n    },\n    oracle,\n};\nuse event_validation_request::EventValidationRequest;\nuse protocol_types::{address::AztecAddress, hash::sha256_to_field};\n\n// Base slot for the pending tagged log array to which the fetch_tagged_logs oracle inserts found private logs.\nglobal PENDING_TAGGED_LOG_ARRAY_BASE_SLOT: Field =\n    sha256_to_field(\"AZTEC_NR::PENDING_TAGGED_LOG_ARRAY_BASE_SLOT\".as_bytes());\n\nglobal NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\n/// Searches for private logs emitted by `contract_address` that might contain messages for one of the local accounts,\n/// and stores them in a `CapsuleArray` which is then returned.\npub(crate) unconstrained fn get_private_logs(\n    contract_address: AztecAddress,\n) -> CapsuleArray<PendingTaggedLog> {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs`\n    // oracle. This makes PXE synchronize tags, download logs and store the pending tagged logs in a capsule array.\n    oracle::message_processing::fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    CapsuleArray::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT)\n}\n\n/// Enqueues a note for validation by PXE, so that it becomes aware of a note's existence allowing for later retrieval\n/// via `get_notes` oracle. The note will be scoped to `contract_address`, meaning other contracts will not be able to\n/// access it unless authorized.\n///\n/// In order for the note validation and insertion to occur, `validate_enqueued_notes_and_events` must be later called.\n/// For optimal performance, accumulate as many note validation requests as possible and then validate them all at the\n/// end (which results in PXE minimizing the number of network round-trips).\n///\n/// The `packed_note` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\npub(crate) unconstrained fn enqueue_note_for_validation(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `NoteValidationRequest`\n    CapsuleArray::at(contract_address, NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        NoteValidationRequest {\n            contract_address,\n            storage_slot,\n            note_nonce,\n            packed_note,\n            note_hash,\n            nullifier,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Enqueues an event for validation by PXE, so that it can be efficiently validated and then inserted into the event\n/// store.\n///\n/// In order for the event validation and insertion to occur, `validate_enqueued_notes_and_events` must be later\n/// called. For optimal performance, accumulate as many event validation requests as possible and then validate them\n/// all at the end (which results in PXE minimizing the number of network round-trips).\npub(crate) unconstrained fn enqueue_event_for_validation(\n    contract_address: AztecAddress,\n    event_type_id: EventSelector,\n    serialized_event: BoundedVec<Field, MAX_EVENT_SERIALIZED_LEN>,\n    event_commitment: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `EventValidationRequest`\n    CapsuleArray::at(contract_address, EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        EventValidationRequest {\n            contract_address,\n            event_type_id,\n            serialized_event,\n            event_commitment,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Validates all note and event validation requests enqueued via `enqueue_note_for_validation` and\n/// `enqueue_event_for_validation`, inserting them into the note database and event store respectively, making them\n/// queryable via `get_notes` oracle and our TS API (PXE::getPrivateEvents).\n///\n/// This automatically clears both validation request queues, so no further work needs to be done by the caller.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(contract_address: AztecAddress) {\n    oracle::message_processing::validate_enqueued_notes_and_events(\n        contract_address,\n        NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n        EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n    );\n}\n\n/// Efficiently queries the node for logs that result in the completion of all `DeliveredPendingPartialNote`s stored in\n/// a `CapsuleArray` by performing all node communication concurrently. Returns a second `CapsuleArray` with Options for\n/// the responses that correspond to the pending partial notes at the same index.\n///\n/// For example, given an array with pending partial notes `[ p1, p2, p3 ]`, where `p1` and `p3` have corresponding\n/// completion logs but `p2` does not, the returned `CapsuleArray` will have contents\n/// `[some(p1_log), none(), some(p3_log)]`.\npub(crate) unconstrained fn get_pending_partial_notes_completion_logs(\n    contract_address: AztecAddress,\n    pending_partial_notes: CapsuleArray<DeliveredPendingPartialNote>,\n) -> CapsuleArray<Option<LogRetrievalResponse>> {\n    let log_retrieval_requests =\n        CapsuleArray::at(contract_address, LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT);\n\n    // We create a LogRetrievalRequest for each PendingPartialNote in the CapsuleArray. Because we need the indices in\n    // the request array to match the indices in the partial note array, we can't use CapsuleArray::for_each, as that\n    // function has arbitrary iteration order. Instead, we manually iterate the array from the beginning and push into\n    // the requests array, which we expect to be empty.\n    let mut i = 0;\n    let pending_partial_notes_count = pending_partial_notes.len();\n    while i < pending_partial_notes_count {\n        let pending_partial_note = pending_partial_notes.get(i);\n        log_retrieval_requests.push(\n            LogRetrievalRequest {\n                contract_address,\n                unsiloed_tag: pending_partial_note.note_completion_log_tag,\n            },\n        );\n        i += 1;\n    }\n\n    oracle::message_processing::bulk_retrieve_logs(\n        contract_address,\n        LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT,\n        LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT,\n    );\n\n    CapsuleArray::at(contract_address, LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT)\n}\n"
    },
    "142": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n"
    },
    "144": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "147": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/note/note_getter.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{\n        note_getter_options::{\n            NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder,\n        },\n        note_interface::{NoteHash, NoteType},\n        note_viewer_options::NoteViewerOptions,\n        retrieved_note::RetrievedNote,\n        utils::compute_note_hash_for_read_request,\n    },\n    oracle,\n    utils::{array, comparison::compare},\n};\n\nuse protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, traits::{Packable, ToField}};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. note nonce, note hash,\n/// etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "150": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, note_nonce: Field },\n//   Settled{ note_nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_note_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_note_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_note_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_note_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_note_nonce }\n            }\n        } else if maybe_note_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_note_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_note_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_note_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.note_nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.note_nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    note_nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    note_nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n"
    },
    "152": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/note/retrieved_note.nr",
      "source": "use crate::{note::note_metadata::NoteMetadata, utils::array::subarray::subarray};\nuse protocol_types::{\n    address::AztecAddress,\n    traits::{FromField, Packable, Serialize, ToField},\n    utils::arrays::array_concat,\n};\n\n// Number of fields a RetrievedNote adds to the packed or serialized representation of a note\n// +1 for the contract address\n// +2 for the note metadata\npub global RETRIEVED_NOTE_OVERHEAD: u32 = 1 + 2;\n\n/// A container of a note and the metadata required to prove its existence, regardless of whether the note is\n/// pending (created in the current transaction) or settled (created in a previous transaction).\n#[derive(Eq)]\npub struct RetrievedNote<NOTE> {\n    pub note: NOTE,\n    pub contract_address: AztecAddress,\n    pub metadata: NoteMetadata,\n}\n\nimpl<NOTE, let N: u32> Serialize<N + RETRIEVED_NOTE_OVERHEAD> for RetrievedNote<NOTE>\nwhere\n    NOTE: Serialize<N>,\n{\n    fn serialize(self) -> [Field; N + RETRIEVED_NOTE_OVERHEAD] {\n        array_concat(\n            array_concat(self.note.serialize(), [self.contract_address.to_field()]),\n            self.metadata.serialize(),\n        )\n    }\n}\n\n// This function is not part of the Packable trait implementation because in the case of the retrieved note, the pack\n// functionality resides in TS (oracle.ts and txe_service.ts).\npub fn unpack_retrieved_note<NOTE, let N: u32>(\n    packed_retrieved_note: [Field; N + RETRIEVED_NOTE_OVERHEAD],\n) -> RetrievedNote<NOTE>\nwhere\n    NOTE: Packable<N>,\n{\n    let contract_address = AztecAddress::from_field(packed_retrieved_note[0]);\n    let note_nonce = packed_retrieved_note[1];\n    let nonzero_note_hash_counter = (packed_retrieved_note[2] as u1) != 0;\n\n    let packed_note = subarray(packed_retrieved_note, RETRIEVED_NOTE_OVERHEAD);\n    let note = NOTE::unpack(packed_note);\n\n    RetrievedNote {\n        note,\n        contract_address,\n        metadata: NoteMetadata::from_raw_data(nonzero_note_hash_counter, note_nonce),\n    }\n}\n"
    },
    "153": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().note_nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let note_nonce = retrieved_note.metadata.to_pending_previous_phase().note_nonce();\n\n        compute_unique_note_hash(note_nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "157": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "158": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "159": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    // Ensure is_infinite is comptime\n    let point1_1 = EmbeddedCurvePoint { x: point1.x, y: point1.y, is_infinite: false };\n    let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n    embedded_curve_add_unsafe(point1_1, point2_1)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "160": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getTimestamp)]\nunconstrained fn get_timestamp_oracle() -> u64 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_timestamp() -> u64 {\n    get_timestamp_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "161": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "162": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "166": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "167": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "168": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] != 0 } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] != 0 } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] != 0 } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] != 0 } },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "170": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/message_processing.nr",
      "source": "use protocol_types::address::AztecAddress;\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(fetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n// This must be a single oracle and not one for notes and one for events because the entire point is to validate\n// all notes and events in one go, minimizing node round-trips.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {\n    validate_enqueued_notes_and_events_oracle(\n        contract_address,\n        note_validation_requests_array_base_slot,\n        event_validation_requests_array_base_slot,\n    );\n}\n\n#[oracle(validateEnqueuedNotesAndEvents)]\nunconstrained fn validate_enqueued_notes_and_events_oracle(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {}\n\npub(crate) unconstrained fn bulk_retrieve_logs(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {\n    bulk_retrieve_logs_oracle(\n        contract_address,\n        log_retrieval_requests_array_base_slot,\n        log_retrieval_responses_array_base_slot,\n    );\n}\n\n#[oracle(bulkRetrieveLogs)]\nunconstrained fn bulk_retrieve_logs_oracle(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {}\n"
    },
    "172": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::note::{\n    note_interface::NoteType,\n    retrieved_note::{RETRIEVED_NOTE_OVERHEAD, RetrievedNote, unpack_retrieved_note},\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress, indexed_tagging_secret::IndexedTaggingSecret, traits::Packable,\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; M],\n    _select_by_offsets: [u8; M],\n    _select_by_lengths: [u8; M],\n    _select_values: [Field; M],\n    _select_comparators: [u8; M],\n    _sort_by_indexes: [u8; M],\n    _sort_by_offsets: [u8; M],\n    _sort_by_lengths: [u8; M],\n    _sort_order: [u8; M],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    // This is always set to MAX_NOTES. We need to pass it to TS in order to correctly construct the BoundedVec\n    _max_notes: u32,\n    // This is always set to NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD. We need to pass it to TS in order to be able to\n    // correctly construct the BoundedVec there.\n    _packed_retrieved_note_length: u32,\n) -> BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> {}\n\npub unconstrained fn get_notes<Note, let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<NOTE_PCKD_LEN>,\n{\n    // N + 3 because of the contract address, note nonce, and note_hash_counter that are stored out of the packed note.\n    let packed_retrieved_notes: BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> = get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        MAX_NOTES,\n        NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD,\n    );\n\n    let mut notes = BoundedVec::<_, MAX_NOTES>::new();\n    for i in 0..packed_retrieved_notes.len() {\n        let retrieved_note = unpack_retrieved_note(packed_retrieved_notes.get(i));\n        notes.push(retrieved_note);\n    }\n\n    // At last we convert the bounded vector to an array of options. We do this because that is what the filter\n    // function needs to have on the output and we've decided to have the same type on the input and output of\n    // the filter and preprocessor functions.\n    //\n    // We have decided to have the same type on the input and output of the filter and preprocessor functions because\n    // it allows us to chain multiple filters and preprocessors together.\n    //\n    // So why do we want the array of options on the output of the filter function?\n    //\n    // Filter returns an array of options rather than a BoundedVec for performance reasons. Using an array of options\n    // allows setting values at known indices in the output array which is much more efficient than pushing to a\n    // BoundedVec where the write position depends on previous iterations. The array can then be efficiently converted\n    // to a BoundedVec using utils/array/collapse.nr::collapse function from Aztec.nr. This avoids expensive dynamic\n    // memory access patterns that would be required when building up a BoundedVec incrementally. For preprocessor\n    // functions we could use BoundedVec return value as there the optimization does not matter since it is applied in\n    // an unconstrained context. We, however, use the same return value type to be able to use the same function as\n    // both a preprocessor and a filter.\n    let mut notes_array = [Option::none(); MAX_NOTES];\n    for i in 0..notes.len() {\n        if i < notes.len() {\n            notes_array[i] = Option::some(notes.get_unchecked(i));\n        }\n    }\n\n    notes_array\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "174": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "175": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "177": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: u32,\n    length: u32,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(address.to_field(), storage_slot, block_number, N)\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "179": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because nothing is stored at said slot: it is only\n// used to derive the storage slots of nested state variables, which is expected to never result in collisions or slots\n// being close to one another due to these being hashes. This mirrors the strategy adopted by Solidity mappings.\nimpl<K, T, Context> Storage<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "181": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr",
      "source": "use dep::protocol_types::{\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator,\n    traits::Packable,\n};\n\nuse crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    lifecycle::create_note,\n    note_emission::NoteEmission,\n    note_getter::{get_note, view_notes},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateImmutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\n// Private storage slots are not really 'slots' but rather a value in the note hash preimage, so there is no notion of a\n// value spilling over multiple slots. For this reason PrivateImmutable (and all other private state variables) needs\n// just one slot to be reserved, regardless of what it stores.\nimpl<T, Context> Storage<1> for PrivateImmutable<T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateImmutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor.\n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: NoteType + NoteHash + Packable<N>,\n    {\n        // We emit an initialization nullifier to indicate that the struct is initialized. This also prevents\n        // the value from being initialized again as a nullifier can be included only once.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<let N: u32>(self) -> Note\n    where\n        Note: NoteType + NoteHash + Packable<N>,\n    {\n        let storage_slot = self.storage_slot;\n        let retrieved_note = get_note(self.context, storage_slot).0;\n\n        // Because the notes obtained from PrivateImmutable are not meant to be nullified and get_note(...) function\n        // has already constrained the note (by pushing a read request to the context), we can return just the note\n        // and skip the additional data in RetrievedNote.\n        retrieved_note.note\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateImmutable<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:is_initialized\n    pub unconstrained fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // view_note does not actually use the context, but it calls oracles that are only available in private\n    // docs:start:view_note\n    pub unconstrained fn view_note<let N: u32>(self) -> Note\n    where\n        Note: Packable<N>,\n    {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"
    },
    "190": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable.nr",
      "source": "use dep::protocol_types::{\n    shared_mutable::{\n        ScheduledDelayChange,\n        ScheduledValueChange,\n        shared_mutable_values::{unpack_delay_change, unpack_value_change},\n        SharedMutableValues,\n    },\n    traits::Packable,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\n\nmod test;\n\npub struct SharedMutable<T, let INITIAL_DELAY: u64, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// This will make the Aztec macros require that T implements the Packable and Eq traits, and allocate `M` storage\n// slots to this state variable.\nimpl<T, let INITIAL_DELAY: u64, Context, let M: u32> Storage<M> for SharedMutable<T, INITIAL_DELAY, Context>\nwhere\n    WithHash<SharedMutableValues<T, INITIAL_DELAY>, _>: Packable<M>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in seconds. Reads in private are only valid as long as they are included in a block with a timestamp not\n// too far into the future, so that they can guarantee the value will not have possibly changed by then (because of the\n// delay). The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, let INITIAL_DELAY: u64, Context> SharedMutable<T, INITIAL_DELAY, Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u64> SharedMutable<T, INITIAL_DELAY, &mut PublicContext>\nwhere\n    T: Eq,\n{\n\n    pub fn schedule_value_change<let N: u32>(self, new_value: T)\n    where\n        T: Packable<N>,\n    {\n        let _value_change = self.schedule_and_return_value_change(new_value);\n    }\n\n    pub fn schedule_and_return_value_change<let N: u32>(\n        self,\n        new_value: T,\n    ) -> ScheduledValueChange<T>\n    where\n        T: Packable<N>,\n    {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let current_timestamp = self.context.timestamp();\n        let current_delay = delay_change.get_current(current_timestamp);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let timestamp_of_change = current_timestamp + current_delay;\n        value_change.schedule_change(\n            new_value,\n            current_timestamp,\n            current_delay,\n            timestamp_of_change,\n        );\n\n        self.write(value_change, delay_change);\n\n        value_change\n    }\n\n    pub fn schedule_delay_change<let N: u32>(self, new_delay: u64)\n    where\n        T: Packable<N>,\n    {\n        let mut delay_change = self.read_delay_change();\n\n        let current_timestamp = self.context.timestamp();\n\n        delay_change.schedule_change(new_delay, current_timestamp);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        let current_timestamp = self.context.timestamp();\n        let value_change = self.read_value_change();\n\n        value_change.get_current_at(current_timestamp)\n    }\n\n    pub fn get_current_delay<let N: u32>(self) -> u64\n    where\n        T: Packable<N>,\n    {\n        let current_timestamp = self.context.timestamp();\n        self.read_delay_change().get_current(current_timestamp)\n    }\n\n    pub fn get_scheduled_value<let N: u32>(self) -> (T, u64)\n    where\n        T: Packable<N>,\n    {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay<let N: u32>(self) -> (u64, u64)\n    where\n        T: Packable<N>,\n    {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change<let N: u32>(self) -> ScheduledValueChange<T>\n    where\n        T: Packable<N>,\n    {\n        // We don't read ScheduledValueChange directly by having it implement Packable because ScheduledValueChange\n        // and ScheduledDelayChange are packed together (sdc and svc.timestamp_of_change are stored in the same slot).\n        let packed = self.context.storage_read(self.storage_slot);\n        unpack_value_change::<T, N>(packed)\n    }\n\n    fn read_delay_change<let N: u32>(self) -> ScheduledDelayChange<INITIAL_DELAY>\n    where\n        T: Packable<N>,\n    {\n        // Since all ScheduledDelayChange member are packed into a single field, we can read a single storage slot\n        // here and skip the ones that correspond to ScheduledValueChange members. We are abusing the fact that\n        // the field containing the ScheduledDelayChange data is the first one in the storage layout - otherwise we'd\n        // need to offset the storage slot to get the position where it'd land.\n        // We don't read ScheduledDelayChange directly by having it implement Packable because ScheduledValueChange\n        // and ScheduledDelayChange are packed together (sdc and svc.timestamp_of_change are stored in the same slot).\n        let packed = self.context.storage_read(self.storage_slot);\n        unpack_delay_change::<INITIAL_DELAY>(packed)\n    }\n\n    fn write<let N: u32>(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>,\n    )\n    where\n        T: Packable<N>,\n    {\n        // Whenever we write to public storage, we write both the value change and delay change to storage at once.\n        // We do so by wrapping them in a single struct (`SharedMutableValues`). Then we wrap the resulting struct in\n        // `WithHash`.\n        // Wrapping in `WithHash` makes for more costly writes but it also makes private proofs much simpler because\n        // they only need to produce a historical proof for the hash, which results in a single inclusion proof (as\n        // opposed to 4 in the best case scenario in which T is a single field). Private shared mutable reads are\n        // assumed to be much more frequent than public writes, so this tradeoff makes sense.\n        let values = WithHash::new(SharedMutableValues::new(value_change, delay_change));\n\n        self.context.storage_write(self.storage_slot, values);\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u64> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext>\nwhere\n    T: Eq,\n{\n    pub fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction timestamp as this proof\n        // will only be valid for the time we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n        let (value_change, delay_change, historical_timestamp) =\n            self.historical_read_from_public_storage();\n\n        // We use the effective minimum delay as opposed to the current delay at the historical timestamp (timestamp of\n        // the historical block against which we are executing the private part of the tx) as this one also takes into\n        // consideration any scheduled delay changes.\n        // For example, consider a scenario in which at timestamp `x` the current delay was 86400 seconds (1 day). We\n        // may naively think that the earliest we could change the value would be at timestamp `x + 86400` by scheduling\n        // immediately after the historical timestamp, i.e. at timestamp `x + 1`. But if there was a delay change scheduled\n        // for timestamp `y` to reduce the delay to 43200 seconds (12 hours), then if a value change was scheduled at\n        // timestamp `y` it would go into effect at timestamp `y + 43200`, which is earlier than what we'd expect if we\n        // only considered the current delay.\n        let effective_minimum_delay =\n            delay_change.get_effective_minimum_delay_at(historical_timestamp);\n        let timestamp_horizon =\n            value_change.get_timestamp_horizon(historical_timestamp, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any timestamp after the timestamp horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_include_by_timestamp(timestamp_horizon);\n\n        value_change.get_current_at(historical_timestamp)\n    }\n\n    fn historical_read_from_public_storage<let N: u32>(\n        self,\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u64)\n    where\n        T: Packable<N>,\n    {\n        let header = self.context.get_block_header();\n        let address = self.context.this_address();\n\n        let historical_timestamp = header.global_variables.timestamp;\n\n        let values: SharedMutableValues<T, INITIAL_DELAY> =\n            WithHash::historical_public_storage_read(header, address, self.storage_slot);\n\n        (values.svc, values.sdc, historical_timestamp)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u64> SharedMutable<T, INITIAL_DELAY, UtilityContext>\nwhere\n    T: Eq,\n{\n    pub unconstrained fn get_current_value<let N: u32>(self) -> T\n    where\n        T: Packable<N>,\n    {\n        let smv: SharedMutableValues<T, INITIAL_DELAY> =\n            WithHash::utility_public_storage_read(self.context, self.storage_slot);\n\n        let current_timestamp = self.context.timestamp();\n        smv.svc.get_current_at(current_timestamp)\n    }\n}\n"
    },
    "202": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "205": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "206": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "208": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "209": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "211": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "213": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "214": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/random.nr",
      "source": "use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n"
    },
    "218": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "225": {
      "path": "/home/nerses/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr",
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "243": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "286": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n"
    },
    "301": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "303": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "304": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{arrays::array_concat, field::{field_from_bytes, field_from_bytes_32_trunc}},\n};\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(note_nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [note_nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_nonce_and_unique_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    let note_nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n    compute_unique_note_hash(note_nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        compute_nonce_and_unique_note_hash(siloed_note_hash, first_nullifier, note_index_in_tx)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn compute_app_secret_key(\n    master_secret_key: EmbeddedCurveScalar,\n    app_address: AztecAddress,\n    app_secret_generator: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [master_secret_key.hi, master_secret_key.lo, app_address.to_field()],\n        app_secret_generator,\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let contract_address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 20] = recipient.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let rollup_version_id_bytes: [u8; 32] = rollup_version_id.to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n\n    let mut bytes: [u8; 148] = std::mem::zeroed();\n    for i in 0..32 {\n        bytes[i] = contract_address_bytes[i];\n        bytes[i + 32] = rollup_version_id_bytes[i];\n        // 64 - 84 are for recipient.\n        bytes[i + 84] = chain_id_bytes[i];\n        bytes[i + 116] = content_bytes[i];\n    }\n\n    for i in 0..20 {\n        bytes[64 + i] = recipient_bytes[i];\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: Scoped<L2ToL1Message>,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.inner.recipient,\n            msg.inner.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n// This function is  unconstrained because it is intended to be used in unconstrained context only as\n// in constrained contexts it would be too inefficient.\npub unconstrained fn poseidon2_hash_with_separator_bounded_vec<let N: u32, T>(\n    inputs: BoundedVec<Field, N>,\n    separator: T,\n) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs.get(i));\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0x3b18c58c739716e76429634a61375c45b3b5cd470c22ab6d3e14cee23dd992);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0xaab2a5828156782b12a1dc6f336e2bc627eb1b9514b02d511f66296990c050);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        L2ToL1Message { recipient: EthAddress::from_field(1), content: 2 }.scope(\n            AztecAddress::from_field(3),\n        ),\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `yarn-project/stdlib/src/hash/hash.test.ts`\n    let hash_from_typescript = 0x0081edf209e087ad31b3fd24263698723d57190bd1d6e9fe056fc0c0a68ee661;\n\n    assert_eq(hash, hash_from_typescript);\n}\n\n#[test]\nunconstrained fn poseidon2_hash_with_separator_bounded_vec_matches_non_bounded_vec_version() {\n    let inputs = BoundedVec::<Field, 4>::from_array([1, 2, 3]);\n    let separator = 42;\n\n    // Hash using bounded vec version\n    let bounded_result = poseidon2_hash_with_separator_bounded_vec(inputs, separator);\n\n    // Hash using regular version\n    let regular_result = poseidon2_hash_with_separator([1, 2, 3], separator);\n\n    // Results should match\n    assert_eq(bounded_result, regular_result);\n}\n"
    },
    "305": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "314": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "318": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] != 0 };\n        consumed_counter = 1;\n    } else if typ.is_field() | typ.as_integer().is_some() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type, _) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type, _)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    let serialize_trait: TraitConstraint =\n        quote { Serialize<$serialized_len> }.as_trait_constraint();\n    quote {\n        impl $serialize_trait for $typ {\n            #[inline_always]\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "320": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] != 0 }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "321": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "331": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] != 0,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] != 0,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] != 0,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] != 0,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "335": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/scheduled_delay_change.nr",
      "source": "use crate::traits::Empty;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initially equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation\n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the\n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a\n// reduced delay, invalidating prior private reads.\npub struct ScheduledDelayChange<let INITIAL_DELAY: u64> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option,\n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pub(crate) pre: Option<u64>,\n    pub(crate) post: Option<u64>,\n    // Timestamp at which `post` value is used instead of `pre`\n    pub(crate) timestamp_of_change: u64,\n}\n\nimpl<let INITIAL_DELAY: u64> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u64>, post: Option<u64>, timestamp_of_change: u64) -> Self {\n        Self { pre, post, timestamp_of_change }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current timestamp - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_timestamp: u64) -> u64 {\n        // The post value becomes the current one at the timestamp of change, so any transaction that is included at or after\n        // the timestamp of change will use the post value.\n        if current_timestamp < self.timestamp_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the timestamp at which it will become the current\n    /// delay. Note that this timestamp may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u64, u64) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.timestamp_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current timestamp. This function is only meaningful\n    /// when called in public with the current timestamp.\n    /// The timestamp at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u64, current_timestamp: u64) {\n        let current = self.get_current(current_timestamp);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let time_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior constraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value timestamp of change\n            //      timestamp             timestamp of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   time until change               new delay              |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.timestamp_of_change = current_timestamp + time_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical timestamp (timestamp of a historical block). It only returns a meaningful value when called in\n    /// private with historical timestamps. This function can be used alongside\n    /// `ScheduledValueChange.get_timestamp_horizon` to properly constrain the `include_by_timestamp` transaction\n    /// property when reading mutable shared state.\n    /// This value typically equals the current delay at the timestamp following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is\n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_timestamp: u64) -> u64 {\n        if self.timestamp_of_change <= historical_timestamp {\n            // If no delay changes were scheduled, then the delay value at the historical timestamp (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // timestamp of change the current delay will be the scheduled one, with an overall delay from the historical\n            // timestamp equal to the time until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //        timestamp                delay                  actual earliest value\n            //           v              timestamp of change           timestamp of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest timestamp in        |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |          time                  new delay                       |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest timestamp in\n            //                             which to scheduled value change\n            let time_until_change = self.timestamp_of_change - (historical_timestamp + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                time_until_change + self.post.unwrap_or(INITIAL_DELAY),\n            )\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u64> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.timestamp_of_change == other.timestamp_of_change)\n    }\n}\n\nimpl<let INITIAL_DELAY: u64> Empty for ScheduledDelayChange<INITIAL_DELAY> {\n    fn empty() -> Self {\n        Self { pre: Option::none(), post: Option::none(), timestamp_of_change: 0 }\n    }\n}\n"
    },
    "337": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/scheduled_value_change.nr",
      "source": "use crate::traits::Empty;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some timestamp\n// called the `timestamp_of_change`. The value can only be made to change by scheduling a change event at some future\n// timestamp after some minimum delay measured in seconds has elapsed. This means that at any given timestamp we know\n// both the current value and the smallest timestamp at which the value might change - this is called the\n// 'timestamp horizon'.\npub struct ScheduledValueChange<T> {\n    pub(crate) pre: T,\n    pub(crate) post: T,\n    // Timestamp at which `post` value is used instead of `pre`\n    pub(crate) timestamp_of_change: u64,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, timestamp_of_change: u64) -> Self {\n        Self { pre, post, timestamp_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given timestamp. This function can be called both in public\n    /// (where `timestamp` is simply the current timestamp, i.e. the timestamp at which the current transaction will be\n    /// included) and in private (where `timestamp` is the historical timestamp that is used to construct the proof).\n    /// Reading in private is only safe if the transaction's `include_by_timestamp` property is set to a value lower or\n    /// equal to the timestamp horizon (see `get_timestamp_horizon()`).\n    pub fn get_current_at(self, timestamp: u64) -> T {\n        // The post value becomes the current one at the timestamp of change. This means different things in each realm:\n        // - in public, any transaction that is included at the timestamp of change will use the post value\n        // - in private, any transaction that includes the timestamp of change as part of the historical state will use\n        //   the post value (barring any follow-up changes)\n        if timestamp < self.timestamp_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the timestamp at which it will become the current\n    /// value. Note that this timestamp may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u64) {\n        (self.post, self.timestamp_of_change)\n    }\n\n    // Returns the previous value. This is the value that is current up until the timestamp of change. Note that this\n    // value might not be the current anymore since timestamp of change might have already passed.\n    pub fn get_previous(self) -> (T, u64) {\n        (self.pre, self.timestamp_of_change)\n    }\n\n    /// Returns the largest timestamp at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_timestamp`\n    /// (timestamp of a historical block at which we are constructing a proof), since due to its asynchronous nature\n    /// private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum time in seconds that needs to\n    /// elapse from the next block's timestamp until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical timestamp is only safe to use\n    /// if the transaction's `include_by_timestamp` property is set to a value lower or equal to the timestamp horizon\n    /// computed using the same historical timestamp.\n    pub fn get_timestamp_horizon(self, historical_timestamp: u64, minimum_delay: u64) -> u64 {\n        // The timestamp horizon is the very last timestamp in which the current value is known. Any timestamp past the\n        // horizon (i.e. with a timestamp larger than the timestamp horizon) may have a different current value.\n        // Reading the current value in private typically requires constraining the maximum valid timestamp to be equal\n        // to the timestamp horizon.\n        if historical_timestamp >= self.timestamp_of_change {\n            // Once the timestamp of change has passed (block with timestamp >= timestamp_of_change was mined),\n            // the current value (post) will not change unless a new value change is scheduled. This did not happen at\n            // the historical timestamp (or else it would not be greater or equal to the timestamp of change), and\n            // therefore could only happen after the historical timestamp. The earliest would be the immediate next\n            // timestamp, and so the smallest possible next timestamp of change equals `historical_timestamp + 1 +\n            // minimum_delay`. Our timestamp horizon is simply the previous timestamp to that one.\n            //\n            //   timestamp of    historical\n            //      change       timestamp          timestamp horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n            historical_timestamp + minimum_delay\n        } else {\n            // If the timestamp of change has not yet been reached however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the timestamp horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the timestamp of change is in the past: the time horizon is\n            //      the timestamp prior to the earliest one in which a new timestamp of change might land.\n            //\n            //         historical\n            //         timestamp                      timestamp horizon    timestamp of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` seconds away from the historical timestamp, in which case\n            //      the timestamp of change would become the limiting factor for the time horizon, which would equal\n            //      the timestamp right before the timestamp of change (since by definition the value changes at the\n            //      timestamp of change).\n            //\n            //           historical                         timestamp horizon\n            //           timestamp   timestamp of change    if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the timestamp of change to an\n            // arbitrary value, and therefore scenario a) is not currently possible. However implementing #5501 would\n            // allow for this to happen.\n            // Because historical_timestamp < self.timestamp_of_change, then timestamp_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.timestamp_of_change - 1,\n                historical_timestamp + minimum_delay,\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current timestamp. This function is only meaningful when\n    /// called in public with the current timestamp.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_timestamp: u64,\n        minimum_delay: u64,\n        timestamp_of_change: u64,\n    ) {\n        assert(timestamp_of_change >= current_timestamp + minimum_delay);\n\n        self.pre = self.get_current_at(current_timestamp);\n        self.post = new_value;\n        self.timestamp_of_change = timestamp_of_change;\n    }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.timestamp_of_change == other.timestamp_of_change)\n    }\n}\n\nimpl<T> Empty for ScheduledValueChange<T>\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        Self { pre: T::empty(), post: T::empty(), timestamp_of_change: 0 }\n    }\n}\n"
    },
    "339": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/shared_mutable/shared_mutable_values.nr",
      "source": "use crate::{\n    hash::poseidon2_hash,\n    shared_mutable::{\n        scheduled_delay_change::ScheduledDelayChange, scheduled_value_change::ScheduledValueChange,\n    },\n    traits::{Hash, Packable},\n    utils::arrays,\n};\nuse std::meta::derive;\n\nmod test;\n\n/// SharedMutableValues is just a wrapper around ScheduledValueChange and ScheduledDelayChange that then allows us\n/// to wrap both of these values in WithHash. WithHash allows for efficient read of values in private.\n///\n/// Note that the WithHash optimization does not work in public (due to there being no unconstrained). But we also want\n/// to be able to read the values efficiently in public and we want to be able to read each value separately. Reading\n/// the values separately is tricky because ScheduledValueChange and ScheduledDelayChange are packed together (sdc and\n/// svc.timestamp_of_change are stored in the same slot). For that reason we expose `unpack_value_change` and\n/// `unpack_delay_change` functions that can be used to extract the values from the packed representation. This\n/// is \"hacky\" but there is no way around it.\n#[derive(Eq)]\npub struct SharedMutableValues<T, let INITIAL_DELAY: u64> {\n    pub svc: ScheduledValueChange<T>,\n    pub sdc: ScheduledDelayChange<INITIAL_DELAY>,\n}\n\nimpl<T, let INITIAL_DELAY: u64> SharedMutableValues<T, INITIAL_DELAY> {\n    pub fn new(svc: ScheduledValueChange<T>, sdc: ScheduledDelayChange<INITIAL_DELAY>) -> Self {\n        SharedMutableValues { svc, sdc }\n    }\n}\n\npub fn unpack_value_change<T, let N: u32>(packed: [Field; 2 * N + 1]) -> ScheduledValueChange<T>\nwhere\n    T: Packable<N>,\n{\n    let svc_pre_packed = arrays::subarray(packed, 1);\n    let svc_post_packed = arrays::subarray(packed, N + 1);\n\n    // We first cast to u32 as the timestamp_of_change is packed into the same field as the delay change and it\n    // occupies the first 32 bits of the field.\n    let timestamp_of_change = (packed[0] as u32) as u64;\n    ScheduledValueChange::new(\n        T::unpack(svc_pre_packed),\n        T::unpack(svc_post_packed),\n        timestamp_of_change,\n    )\n}\n\npub fn unpack_delay_change<let INITIAL_DELAY: u64>(\n    packed: Field,\n) -> ScheduledDelayChange<INITIAL_DELAY> {\n    // This function expects to be called with just the first field of the packed representation, which contains sdc\n    // and svc timestamp_of_change. We'll discard the svc component.\n    let svc_timestamp_of_change = packed as u32;\n\n    let mut tmp = (packed - svc_timestamp_of_change as Field) / TWO_POW_32;\n    let sdc_timestamp_of_change = tmp as u32;\n\n    tmp = (tmp - sdc_timestamp_of_change as Field) / TWO_POW_32;\n    let sdc_post_is_some = (tmp as u1) != 0;\n\n    tmp = (tmp - sdc_post_is_some as Field) / TWO_POW_8;\n    let sdc_post_inner = tmp as u32;\n\n    tmp = (tmp - sdc_post_inner as Field) / TWO_POW_32;\n    let sdc_pre_is_some = (tmp as u1) != 0;\n\n    tmp = (tmp - sdc_pre_is_some as Field) / TWO_POW_8;\n    let sdc_pre_inner = tmp as u32;\n\n    // Note that below we cast the values to u64 as that is the default type of timestamp in the system. Us packing\n    // the values as u32 is a tech debt that is not worth tackling.\n    ScheduledDelayChange {\n        pre: if sdc_pre_is_some {\n            Option::some(sdc_pre_inner as u64)\n        } else {\n            Option::none()\n        },\n        post: if sdc_post_is_some {\n            Option::some(sdc_post_inner as u64)\n        } else {\n            Option::none()\n        },\n        timestamp_of_change: sdc_timestamp_of_change as u64,\n    }\n}\n\nglobal TWO_POW_32: Field = 2.pow_32(32);\nglobal TWO_POW_8: Field = 2.pow_32(8);\n\n// We pack to `2 * N + 1` fields because ScheduledValueChange contains T twice (hence `2 * N`) and we need one extra\n// field to store ScheduledDelayChange and the timestamp_of_change of ScheduledValueChange.\nimpl<T, let INITIAL_DELAY: u64, let N: u32> Packable<2 * N + 1> for SharedMutableValues<T, INITIAL_DELAY>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; 2 * N + 1] {\n        let mut result = [0; 2 * N + 1];\n\n        // We pack sdc.pre, sdc.post, sdc.timestamp_of_change and svc.timestamp_of_change into a single field as follows:\n        // [ sdc.pre_inner: u32 | sdc.pre_is_some: u8 | sdc.post_inner: u32 | sdc.post_is_some: u8 | sdc.timestamp_of_change: u32 | svc.timestamp_of_change: u32 ]\n        // Note that the code below no longer works after 2106 as by that time the timestamp will overflow u32. This is a tech debt that is not worth tackling.\n        result[0] = self.svc.timestamp_of_change as Field\n            + ((self.sdc.timestamp_of_change as Field) * 2.pow_32(32))\n            + ((self.sdc.post.is_some() as Field) * 2.pow_32(64))\n            + ((self.sdc.post.unwrap_unchecked() as Field) * 2.pow_32(72))\n            + ((self.sdc.pre.is_some() as Field) * 2.pow_32(104))\n            + ((self.sdc.pre.unwrap_unchecked() as Field) * 2.pow_32(112));\n\n        // Pack the pre and post values from ScheduledValueChange\n        let svc_pre_packed = self.svc.pre.pack();\n        let svc_post_packed = self.svc.post.pack();\n        for i in 0..N {\n            result[i + 1] = svc_pre_packed[i];\n            result[i + 1 + N] = svc_post_packed[i];\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; 2 * N + 1]) -> Self {\n        let svc = unpack_value_change::<T, N>(fields);\n        let sdc = unpack_delay_change::<INITIAL_DELAY>(fields[0]);\n        Self::new(svc, sdc)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u64, let N: u32> Hash for SharedMutableValues<T, INITIAL_DELAY>\nwhere\n    T: Packable<N>,\n{\n    fn hash(self) -> Field {\n        poseidon2_hash(self.pack())\n    }\n}\n"
    },
    "342": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "356": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    #[inline_always]\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value != 0\n    }\n}\nimpl FromField for u1 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    #[inline_always]\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// T = type of item in BoundedVec\n// M = max length of BoundedVec\n// O = field length of T\n// O * M + 1 = total serialized length of BoundedVec<T, M> (the +1 is for length of the BoundedVec)\nimpl<T, let M: u32, let O: u32> Deserialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Deserialize<O>,\n{\n    #[inline_always]\n    fn deserialize(fields: [Field; O * M + 1]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        let len = fields[O * M] as u32;\n\n        for i in 0..len {\n            let mut nested_fields = [0; O];\n            for j in 0..O {\n                nested_fields[j] = fields[i * O + j];\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\n// This may cause issues if used as program input, because noir disallows empty arrays for program input.\n// I think this is okay because I don't foresee a unit type being used as input. But leaving this comment as a hint\n// if someone does run into this in the future.\nimpl<let N: u32> Deserialize<0> for () {\n    fn deserialize(_fields: [Field; 0]) -> Self {\n        ()\n    }\n}\n\nimpl<T, let M: u32, let O: u32> Serialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Serialize<O>,\n{\n    #[inline_always]\n    fn serialize(self) -> [Field; O * M + 1] {\n        let mut fields = [0; O * M + 1];\n\n        let storage = self.storage();\n\n        for i in 0..M {\n            let serialized_item = storage[i].serialize();\n\n            for j in 0..O {\n                fields[i * O + j] = serialized_item[j];\n            }\n        }\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        fields[O * M] = self.len() as Field;\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    #[inline_always]\n    fn deserialize(fields: [Field; N]) -> Self {\n        str::<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n\n#[test]\nunconstrained fn bounded_vec_serialization() {\n    // Test empty BoundedVec\n    let empty_vec: BoundedVec<Field, 3> = BoundedVec::from_array([]);\n    let serialized = empty_vec.serialize();\n    let deserialized = BoundedVec::<Field, 3>::deserialize(serialized);\n    assert_eq(empty_vec, deserialized);\n    assert_eq(deserialized.len(), 0);\n\n    // Test partially filled BoundedVec\n    let partial_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2]]);\n    let serialized = partial_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(partial_vec, deserialized);\n    assert_eq(deserialized.len(), 1);\n    assert_eq(deserialized.get(0), [1, 2]);\n\n    // Test full BoundedVec\n    let full_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2], [3, 4], [5, 6]]);\n    let serialized = full_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(full_vec, deserialized);\n    assert_eq(deserialized.len(), 3);\n    assert_eq(deserialized.get(0), [1, 2]);\n    assert_eq(deserialized.get(1), [3, 4]);\n    assert_eq(deserialized.get(2), [5, 6]);\n}\n"
    },
    "361": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        (fields[0] as u1) != 0\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as u8 as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as u16 as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as u32 as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as u64 as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "362": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] != 0\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as u8 as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as u16 as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as u32 as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as u64 as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\nimpl<T, let N: u32> Serialize<N + 1> for Option<T>\nwhere\n    T: Serialize<N>,\n{\n    fn serialize(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n\n        result[0] = if self.is_some() { 1 } else { 0 };\n\n        let value_serialized = self.unwrap_unchecked().serialize();\n        for i in 0..N {\n            result[1 + i] = value_serialized[i];\n        }\n\n        result\n    }\n}\n\nimpl<T, let N: u32> Deserialize<N + 1> for Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    fn deserialize(fields: [Field; N + 1]) -> Self {\n        if fields[0] == 1 {\n            let mut value_serialized: [Field; N] = std::mem::zeroed();\n            for i in 0..N {\n                value_serialized[i] = fields[1 + i];\n            }\n\n            Option::some(T::deserialize(value_serialized))\n        } else {\n            Option::none()\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Serialize};\n\n    #[test]\n    fn u16_serialization() {\n        let a: u16 = 10;\n        assert_eq(a, u16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i8_serialization() {\n        let a: i8 = -10;\n        assert_eq(a, i8::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i16_serialization() {\n        let a: i16 = -10;\n        assert_eq(a, i16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i32_serialization() {\n        let a: i32 = -10;\n        assert_eq(a, i32::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i64_serialization() {\n        let a: i64 = -10;\n        assert_eq(a, i64::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn option_field_serialization() {\n        let opt_some = Option::some(5);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n\n    #[test]\n    fn option_array_serialization() {\n        let opt_some = Option::some([2, 5]);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n}\n"
    },
    "380": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_padded_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_padded_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_padded_array::{\n    assert_sorted_transformed_i_padded_array_capped_size,\n    assert_sorted_transformed_padded_array_capped_size, validate_padded_items,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},\n};\npub use assert_split_transformed_padded_arrays::assert_split_transformed_padded_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::sort_by_counter_asc;\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\n// Returns the number of consecutive elements at the start of the array for which the predicate returns false.\n// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.\npub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {\n    let mut length = 0;\n    let mut stop = false;\n    for i in 0..N {\n        if predicate(array[i]) {\n            stop = true;\n        } else {\n            assert(\n                stop == false,\n                \"matching element found after already encountering a non-matching element\",\n            );\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n// Helper function to check if an array is padded with a given value from a given index.\n// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.\npub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool\nwhere\n    T: Eq,\n{\n    let mut is_valid = true;\n    let mut should_check = false;\n    for i in 0..N {\n        should_check |= i == from_index;\n        is_valid &= !should_check | (array[i] == padded_with);\n    }\n    is_valid\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn test_array_length_until() {\n    let array = [11, 22, 33, 44, 55];\n    assert_eq(array_length_until(array, |x| x == 55), 4);\n    assert_eq(array_length_until(array, |x| x == 56), 5);\n    assert_eq(array_length_until(array, |x| x > 40), 3);\n    assert_eq(array_length_until(array, |x| x > 10), 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_non_consecutive_fails() {\n    let array = [1, 1, 0, 1, 0];\n    let _ = array_length_until(array, |x| x == 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_first_non_matching_fails() {\n    let array = [1, 0, 0, 0, 0];\n    let _ = array_length_until(array, |x| x == 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test]\nfn test_array_padded_with() {\n    let array = [11, 22, 33, 44, 44];\n    assert_eq(array_padded_with(array, 0, 44), false);\n    assert_eq(array_padded_with(array, 1, 44), false);\n    assert_eq(array_padded_with(array, 2, 44), false);\n    assert_eq(array_padded_with(array, 3, 44), true);\n    assert_eq(array_padded_with(array, 4, 44), true);\n    assert_eq(array_padded_with(array, 4, 33), false);\n    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.\n    assert_eq(array_padded_with(array, 0, 11), false);\n}\n"
    },
    "381": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO: This currently only exists to aid point compression in compress_to_blob_commitment().\n// Once compression is part of BigCurve it can either be removed or optimised to be used elsewhere.\npub fn byte_to_bits_be(byte: u8) -> [u1; 8] {\n    let mut mut_byte = byte;\n    let mut bits: [u1; 8] = [0; 8];\n    for i in 0..8 {\n        bits[7 - i] = (mut_byte & 1) as u1;\n        mut_byte >>= 1;\n    }\n    bits\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "383": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() != 0\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "393": {
      "path": "/home/nerses/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "414": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    history::nullifier_inclusion::ProveNullifierInclusion,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{\n            GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER,\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT, PRIVATE_LOG_SIZE_IN_FIELDS,\n        },\n        hash::{compute_siloed_nullifier, poseidon2_hash_with_separator},\n        traits::{Deserialize, FromField, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// This function inserts a partial note validity commitment into the nullifier tree to be later on able to verify\n    /// that the partial note and completer are legitimate. See function docs of `compute_validity_commitment` for more\n    /// details.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n        completer: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        // Regardless of the original content size, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_private_log(encrypted_log, length);\n\n        let partial_note = PartialUintNote { commitment };\n\n        // Now we compute the validity commitment and push it to the nullifier tree. It can be safely pushed to\n        // the nullifier tree since it uses its own separator, making collisions with actual note nullifiers\n        // practically impossible.\n        let validity_commitment = partial_note.compute_validity_commitment(completer);\n        context.push_nullifier(validity_commitment);\n\n        partial_note\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nglobal NOTE_COMPLETION_LOG_LENGTH: u32 = 2;\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, context: &mut PublicContext, completer: AztecAddress, value: u128) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        assert(\n            context.nullifier_exists(validity_commitment, context.this_address()),\n            \"Invalid partial note or completer\",\n        );\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Completes the partial note, creating a new note that can be used like any other UintNote. Same as `complete`\n    /// function but works from private context.\n    pub fn complete_from_private(\n        self,\n        context: &mut PrivateContext,\n        completer: AztecAddress,\n        value: u128,\n    ) {\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        // `prove_nullifier_inclusion` function expects the nullifier to be siloed (hashed with the address of\n        // the contract that emitted the nullifier) as it checks the value directly against the nullifier tree and all\n        // the nullifiers in the tree are siloed by the protocol.\n        let siloed_validity_commitment =\n            compute_siloed_nullifier(context.this_address(), validity_commitment);\n        context.get_block_header().prove_nullifier_inclusion(siloed_validity_commitment);\n\n        // We need to do two things:\n        //  - emit an unencrypted log containing the public fields (the value) via the private log channel. The\n        //  contract will later find it by searching for the expected tag (which is simply the partial note\n        //  commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_private_log(\n            self.compute_note_completion_log_padded_for_private_log(value),\n            NOTE_COMPLETION_LOG_LENGTH,\n        );\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Computes a validity commitment for this partial note. The commitment cryptographically binds the note's private\n    /// data with the designated completer address. When the note is later completed in public execution, we can load\n    /// this commitment from the nullifier tree and verify that both the partial note (e.g. that the storage slot\n    /// corresponds to the correct owner, and that we're using the correct state variable) and completer are\n    /// legitimate.\n    pub fn compute_validity_commitment(self, completer: AztecAddress) -> Field {\n        poseidon2_hash_with_separator(\n            [self.commitment, completer.to_field()],\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT,\n        )\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; NOTE_COMPLETION_LOG_LENGTH] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_note_completion_log_padded_for_private_log(\n        self,\n        value: u128,\n    ) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS] {\n        let note_completion_log = self.compute_note_completion_log(value);\n        let padding = [0; PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_COMPLETION_LOG_LENGTH];\n        array_concat(note_completion_log, padding)\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nimpl ToField for PartialUintNote {\n    fn to_field(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl FromField for PartialUintNote {\n    fn from_field(field: Field) -> Self {\n        Self { commitment: field }\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0_u64, 1), 0);\n        assert_eq(min(0_u64, 0), 0);\n        assert_eq(min(1_u64, 1), 1);\n        assert_eq(min(255_u8, 0), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0_u64, 1), 1);\n        assert_eq(max(0_u64, 0), 0);\n        assert_eq(max(1_u64, 1), 1);\n        assert_eq(max(255_u8, 0), 255);\n    }\n}\n"
    },
    "50": {
      "path": "/home/nerses/contracts/chains/aztec/contracts/train/src/lib.nr",
      "source": "pub fn bytes_to_u128_limbs(bytes: [u8; 32]) -> (u128, u128) {\n    let mut high: u128 = 0;\n    let mut low: u128 = 0;\n    for i in 0..16 {\n        high = (high << 8) + (bytes[i] as u128);\n    }\n    for i in 16..32 {\n        low = (low << 8) + (bytes[i] as u128);\n    }\n    (high, low)\n}\n\npub fn u128_limbs_to_bytes(high: u128, low: u128) -> [u8; 32] {\n    let mut bytes: [u8; 32] = [0; 32];\n\n    let mut temp = high;\n    for i in 0..16 {\n        bytes[15 - i] = (temp & 0xff) as u8;\n        temp >>= 8;\n    }\n\n    temp = low;\n    for i in 0..16 {\n        bytes[31 - i] = (temp & 0xff) as u8;\n        temp >>= 8;\n    }\n\n    bytes\n}\n"
    },
    "51": {
      "path": "/home/nerses/contracts/chains/aztec/contracts/train/src/main.nr",
      "source": "//     @@                                    @@@\n//    @@@\n//    @@@        @@   @@@@      @@@@@         @     @    @@@@@\n//  @@@@@@@@@   @@@@@@      @@@@    @@@@@    @@@   @@@@@@    @@@@\n//    @@@       @@@       @@@           @@@  @@@   @@@          @@@\n//    @@@       @@@       @@@           @@@  @@@   @@@          @@@\n//    @@@       @@@       @@@           @@@  @@@   @@@          @@@\n//     @@@      @@@        @@@@       @@@@@  @@@   @@@          @@@\n//       @@@@@  @@@           @@@@@@@@@ @@@  @@@   @@@          @@@\n\nmod lib;\nmod types;\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract Train {\n    use crate::lib::{bytes_to_u128_limbs, u128_limbs_to_bytes};\n    use crate::types::events::{\n        TokenCommitted, TokenLockAdded, TokenLockedFirst, TokenLockedSecond, TokenRedeemed,\n        TokenRefunded,\n    };\n    use dep::aztec::messages::logs::note::encode_and_encrypt_note;\n    use dep::aztec::protocol_types::traits::{Deserialize, Packable, Serialize};\n    use dep::aztec::state_vars::{private_immutable::PrivateImmutable, SharedMutable};\n    use dep::sha256;\n    use dep::token::Token;\n    use aztec::macros::{\n        functions::{initializer, internal, private, public, utility, view},\n        notes::note,\n        storage::storage,\n    };\n    use aztec::prelude::{AztecAddress, Map};\n    use std::meta::derive;\n\n    #[note]\n    #[derive(Eq)]\n    struct HTLC_Private {\n        owner: AztecAddress,\n        randomness: Field,\n    }\n    #[derive(Eq, Packable, Serialize, Deserialize)]\n    pub struct HTLC_Public {\n        src_receiver: AztecAddress,\n        amount: u128,\n        token: AztecAddress,\n        hashlock_high: u128,\n        hashlock_low: u128,\n        secret_high: u128,\n        secret_low: u128,\n        ownership_hash_high: u128,\n        ownership_hash_low: u128,\n        timelock: u64,\n        claimed: u8,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor() {}\n\n    #[storage]\n    struct Storage<Context> {\n        contracts_private: Map<Field, PrivateImmutable<HTLC_Private, Context>, Context>,\n        contracts_public: Map<Field, SharedMutable<HTLC_Public, 180, Context>, Context>,\n    }\n\n    #[private]\n    fn commit_private_user(\n        Id: Field,\n        src_receiver: AztecAddress,\n        timelock: u64,\n        token: AztecAddress,\n        amount: u128,\n        dst_chain: str<30>,\n        dst_asset: str<30>,\n        dst_address: str<90>,\n        randomness: Field,\n    ) {\n        assert(amount > 0, \"FundsNotSent\");\n\n        // Safety: The contract intentionally exposes these parameters as public.\n        Train::at(context.this_address())\n            .commit_public_user(\n                dst_chain,\n                dst_asset,\n                dst_address,\n                Id,\n                src_receiver,\n                timelock,\n                token,\n                amount,\n            )\n            .enqueue(&mut context);\n\n        let htlc_note = HTLC_Private { owner: context.msg_sender(), randomness: randomness };\n        storage.contracts_private.at(Id).initialize(htlc_note).emit(encode_and_encrypt_note(\n            &mut context,\n            context.msg_sender(),\n            context.msg_sender(),\n        ));\n\n        Token::at(token)\n            .transfer_to_public(context.msg_sender(), context.this_address(), amount, randomness)\n            .call(&mut context);\n    }\n\n    #[internal]\n    #[public]\n    fn commit_public_user(\n        dst_chain: str<30>,\n        dst_asset: str<30>,\n        dst_address: str<90>,\n        Id: Field,\n        src_receiver: AztecAddress,\n        timelock: u64,\n        token: AztecAddress,\n        amount: u128,\n    ) {\n        let htlc_public_current = storage.contracts_public.at(Id).get_current_value();\n        assert(htlc_public_current.amount == 0, \"HTLCAlreadyExists\");\n        assert(context.timestamp() + 900 < timelock, \"InvalidTimelock\");\n        let htlc_public = HTLC_Public {\n            src_receiver: src_receiver,\n            amount: amount,\n            token: token,\n            hashlock_high: 0 as u128,\n            hashlock_low: 0 as u128,\n            secret_high: 0 as u128,\n            secret_low: 0 as u128,\n            ownership_hash_high: 0 as u128,\n            ownership_hash_low: 0 as u128,\n            timelock: timelock,\n            claimed: 1 as u8,\n        };\n        storage.contracts_public.at(Id).schedule_value_change(htlc_public);\n        let log_msg = TokenCommitted {\n            Id: Id,\n            amount: amount,\n            token: token,\n            timelock: timelock,\n            src_receiver: src_receiver,\n            dst_chain: dst_chain,\n            dst_asset: dst_asset,\n            dst_address: dst_address,\n        };\n        context.emit_public_log(log_msg.pack());\n    }\n\n    #[private]\n    fn add_lock_private_user(Id: Field, hashlock: [u8; 32], timelock: u64) {\n        let htlc_private = storage.contracts_private.at(Id).get_note();\n        assert(htlc_private.owner == context.msg_sender(), \"NoAllowance\");\n\n        // Safety: The contract intentionally exposes these parameters as public.\n        Train::at(context.this_address()).add_lock_public_user(Id, hashlock, timelock).enqueue(\n            &mut context,\n        );\n    }\n\n    #[internal]\n    #[public]\n    fn add_lock_public_user(Id: Field, hashlock: [u8; 32], timelock: u64) {\n        assert(context.timestamp() + 900 < timelock, \"InvalidTimelock\");\n        let htlc_public = storage.contracts_public.at(Id).get_current_value();\n        assert(htlc_public.claimed == 1, \"AlreadyClaimed\");\n        assert(htlc_public.hashlock_high == (0 as u128), \"HashlockAlreadySet\");\n        assert(htlc_public.hashlock_low == (0 as u128), \"HashlockAlreadySet\");\n\n        let hashlock_tuple = bytes_to_u128_limbs(hashlock);\n        let modified_htlc_public = HTLC_Public {\n            src_receiver: htlc_public.src_receiver,\n            amount: htlc_public.amount,\n            token: htlc_public.token,\n            hashlock_high: hashlock_tuple.0,\n            hashlock_low: hashlock_tuple.1,\n            secret_high: htlc_public.secret_high,\n            secret_low: htlc_public.secret_low,\n            ownership_hash_high: htlc_public.ownership_hash_high,\n            ownership_hash_low: htlc_public.ownership_hash_low,\n            timelock: timelock,\n            claimed: htlc_public.claimed,\n        };\n        storage.contracts_public.at(Id).schedule_value_change(modified_htlc_public);\n        let log_msg = TokenLockAdded { Id, hashlock, timelock };\n        context.emit_public_log(log_msg.pack());\n    }\n\n    #[private]\n    fn refund_private(Id: Field) {\n        // Safety: The contract intentionally exposes these parameters as public.\n        Train::at(context.this_address()).refund_public(Id).enqueue(&mut context);\n\n        let htlc_private = storage.contracts_private.at(Id).get_note();\n        let htlc_public = storage.contracts_public.at(Id).get_current_value();\n\n        let partial_note = Token::at(htlc_public.token)\n            .prepare_private_balance_increase(htlc_private.owner, htlc_private.owner)\n            .call(&mut context);\n        Token::at(htlc_public.token)\n            .finalize_transfer_to_private(htlc_public.amount, partial_note)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn refund_public(Id: Field) {\n        let htlc_public = storage.contracts_public.at(Id).get_current_value();\n        assert(htlc_public.claimed == 1, \"AlreadyClaimed\");\n        assert(htlc_public.timelock < context.timestamp(), \"NotPassedTimelock\");\n        let modified_htlc_public = HTLC_Public {\n            src_receiver: htlc_public.src_receiver,\n            amount: htlc_public.amount,\n            token: htlc_public.token,\n            hashlock_high: htlc_public.hashlock_high,\n            hashlock_low: htlc_public.hashlock_low,\n            secret_high: htlc_public.secret_high,\n            secret_low: htlc_public.secret_low,\n            ownership_hash_high: htlc_public.ownership_hash_high,\n            ownership_hash_low: htlc_public.ownership_hash_low,\n            timelock: htlc_public.timelock,\n            claimed: 2 as u8,\n        };\n\n        storage.contracts_public.at(Id).schedule_value_change(modified_htlc_public);\n        let log_msg = TokenRefunded { Id };\n        context.emit_public_log(log_msg.pack());\n    }\n\n    #[private]\n    fn lock_private_solver(\n        Id: Field,\n        hashlock: [u8; 32],\n        amount: u128,\n        ownership_hash: [u8; 32],\n        timelock: u64,\n        token: AztecAddress,\n        randomness: Field,\n        dst_chain: str<30>,\n        dst_asset: str<30>,\n        dst_address: str<90>,\n    ) {\n        assert(amount > 0, \"FundsNotSent\");\n        // Safety: The contract intentionally exposes these parameters as public.\n        Train::at(context.this_address())\n            .lock_public_solver(\n                Id,\n                hashlock,\n                ownership_hash,\n                amount,\n                token,\n                timelock,\n                dst_chain,\n                dst_asset,\n                dst_address,\n            )\n            .enqueue(&mut context);\n\n        let htlc_note = HTLC_Private { owner: context.msg_sender(), randomness: randomness };\n        storage.contracts_private.at(Id).initialize(htlc_note).emit(encode_and_encrypt_note(\n            &mut context,\n            context.msg_sender(),\n            context.msg_sender(),\n        ));\n\n        Token::at(token)\n            .transfer_to_public(context.msg_sender(), context.this_address(), amount, randomness)\n            .call(&mut context);\n    }\n\n    #[internal]\n    #[public]\n    fn lock_public_solver(\n        Id: Field,\n        hashlock: [u8; 32],\n        ownership_hash: [u8; 32],\n        amount: u128,\n        token: AztecAddress,\n        timelock: u64,\n        dst_chain: str<30>,\n        dst_asset: str<30>,\n        dst_address: str<90>,\n    ) {\n        let htlc_public_current = storage.contracts_public.at(Id).get_current_value();\n        assert(htlc_public_current.amount == 0, \"HTLCAlreadyExists\");\n        assert(context.timestamp() + 1800 < timelock, \"InvalidTimelock\");\n        let hashlock_tuple = bytes_to_u128_limbs(hashlock);\n        let ownership_hash_tuple = bytes_to_u128_limbs(ownership_hash);\n        let htlc_public = HTLC_Public {\n            src_receiver: AztecAddress::zero(),\n            amount: amount,\n            token: token,\n            hashlock_high: hashlock_tuple.0,\n            hashlock_low: hashlock_tuple.1,\n            secret_high: 0 as u128,\n            secret_low: 0 as u128,\n            ownership_hash_high: ownership_hash_tuple.0,\n            ownership_hash_low: ownership_hash_tuple.1,\n            timelock: timelock,\n            claimed: 1 as u8,\n        };\n        storage.contracts_public.at(Id).schedule_value_change(htlc_public);\n\n        let log_msg_1 = TokenLockedFirst {\n            Id: Id,\n            amount: amount,\n            token: token,\n            timelock: timelock,\n            src_receiver: AztecAddress::zero(),\n            dst_chain: dst_chain,\n            dst_asset: dst_asset,\n            dst_address: dst_address,\n        };\n\n        let log_msg_2 =\n            TokenLockedSecond { Id: Id, hashlock: hashlock, ownership_hash: ownership_hash };\n\n        context.emit_public_log(log_msg_1.pack());\n        context.emit_public_log(log_msg_2.pack());\n    }\n\n    #[private]\n    fn redeem_private(Id: Field, secret: [u8; 32], ownership_key: [u8; 32]) {\n        // Safety: The contract intentionally exposes these parameters as public.\n        Train::at(context.this_address()).redeem_public(Id, secret, ownership_key).enqueue(\n            &mut context,\n        );\n        let htlc_public = storage.contracts_public.at(Id).get_current_value();\n        if (htlc_public.ownership_hash_high == 0 as u128) {\n            if htlc_public.ownership_hash_low == 0 as u128 {\n                let partial_note = Token::at(htlc_public.token)\n                    .prepare_private_balance_increase(\n                        htlc_public.src_receiver,\n                        htlc_public.src_receiver,\n                    )\n                    .call(&mut context);\n                Token::at(htlc_public.token)\n                    .finalize_transfer_to_private(htlc_public.amount, partial_note)\n                    .enqueue(&mut context);\n            }\n        } else {\n            let partial_note = Token::at(htlc_public.token)\n                .prepare_private_balance_increase(context.msg_sender(), context.msg_sender())\n                .call(&mut context);\n            Token::at(htlc_public.token)\n                .finalize_transfer_to_private(htlc_public.amount, partial_note)\n                .enqueue(&mut context);\n        }\n    }\n\n    #[public]\n    #[internal]\n    fn redeem_public(Id: Field, secret: [u8; 32], ownership_key: [u8; 32]) {\n        let mut htlc_public = storage.contracts_public.at(Id).get_current_value();\n        assert(htlc_public.amount > 0, \"HTLCNotExists\"); // If it doesn't exist, all parameters will default to zero values.\n        let hashed_secret = sha256::sha256_var(secret, secret.len() as u64);\n        let hashed_secret_tuple = bytes_to_u128_limbs(hashed_secret);\n        assert(htlc_public.hashlock_high == hashed_secret_tuple.0, \"HashlockNotMatch\");\n        assert(htlc_public.hashlock_low == hashed_secret_tuple.1, \"HashlockNotMatch\");\n        assert(htlc_public.claimed == 1, \"AlreadyClaimed\");\n\n        if (htlc_public.ownership_hash_high != 0 as u128) {\n            if htlc_public.ownership_hash_low != 0 as u128 {\n                let ownership_key_hashed =\n                    sha256::sha256_var(ownership_key, ownership_key.len() as u64);\n                let ownership_key_tuple = bytes_to_u128_limbs(ownership_key_hashed);\n                assert(htlc_public.ownership_hash_high == ownership_key_tuple.0, \"NotAnOwner\");\n                assert(htlc_public.ownership_hash_low == ownership_key_tuple.1, \"NotAnOwner\");\n            }\n        }\n\n        let secret_limbs = bytes_to_u128_limbs(secret);\n\n        let modified_htlc_public = HTLC_Public {\n            src_receiver: htlc_public.src_receiver,\n            amount: htlc_public.amount,\n            token: htlc_public.token,\n            hashlock_high: htlc_public.hashlock_high,\n            hashlock_low: htlc_public.hashlock_low,\n            secret_high: secret_limbs.0,\n            secret_low: secret_limbs.1,\n            ownership_hash_high: htlc_public.ownership_hash_high,\n            ownership_hash_low: htlc_public.ownership_hash_low,\n            timelock: htlc_public.timelock,\n            claimed: 3 as u8,\n        };\n\n        storage.contracts_public.at(Id).schedule_value_change(modified_htlc_public);\n\n        let log_msg = TokenRedeemed {\n            Id: Id,\n            hashlock: u128_limbs_to_bytes(htlc_public.hashlock_high, htlc_public.hashlock_low),\n            secret: secret,\n        };\n\n        context.emit_public_log(log_msg.pack());\n    }\n\n    // This utility function should be invoked by the frontend before each function call\n    // where the existence or non-existence of an HTLC is a critical security check.\n    #[utility]\n    unconstrained fn is_contract_initialized(Id: Field) -> bool {\n        storage.contracts_private.at(Id).is_initialized()\n    }\n\n    #[view]\n    #[utility]\n    unconstrained fn get_htlc_public(key: Field) -> pub HTLC_Public {\n        storage.contracts_public.at(key).get_current_value()\n    }\n}\n"
    },
    "52": {
      "path": "/home/nerses/contracts/chains/aztec/contracts/train/src/types/events.nr",
      "source": "use crate::lib::{bytes_to_u128_limbs, u128_limbs_to_bytes};\nuse dep::aztec::prelude::AztecAddress;\nuse dep::aztec::protocol_types::traits::{Packable, Serialize};\n\n#[derive(Serialize)]\npub struct TokenCommitted {\n    pub Id: Field,\n    pub amount: u128,\n    pub token: AztecAddress,\n    pub timelock: u64,\n    pub src_receiver: AztecAddress,\n    pub dst_chain: str<30>,\n    pub dst_asset: str<30>,\n    pub dst_address: str<90>,\n}\n\nimpl Packable<11> for TokenCommitted {\n    fn pack(self) -> [Field; 11] {\n        let zero: Field = 0;\n        let mut out = [zero; 11];\n        out[0] = 0x7A3F2B1C;\n        out[1] = self.Id;\n        out[2] = self.amount as Field;\n        out[3] = self.token.inner;\n        out[4] = self.timelock as Field;\n        out[5] = self.src_receiver.inner;\n\n        let dst_chain_byte_array = self.dst_chain.as_bytes();\n        let mut dst_chain_byte_array_filled = [0 as u8; 30];\n        for i in 0..dst_chain_byte_array.len() {\n            dst_chain_byte_array_filled[i] = dst_chain_byte_array[i];\n        }\n        out[6] = Field::from_be_bytes::<30>(dst_chain_byte_array_filled);\n\n        let dst_asset_byte_array = self.dst_asset.as_bytes();\n        let mut dst_asset_byte_array_filled = [0 as u8; 30];\n        for i in 0..dst_asset_byte_array.len() {\n            dst_asset_byte_array_filled[i] = dst_asset_byte_array[i];\n        }\n        out[7] = Field::from_be_bytes::<30>(dst_asset_byte_array_filled);\n\n        let dst_address_byte_array = self.dst_address.as_bytes();\n        let mut dst_address_byte_array_filled_1 = [0 as u8; 30];\n        let mut dst_address_byte_array_filled_2 = [0 as u8; 30];\n        let mut dst_address_byte_array_filled_3 = [0 as u8; 30];\n\n        for i in 0..30 {\n            dst_address_byte_array_filled_1[i] = dst_address_byte_array[i];\n            dst_address_byte_array_filled_2[i] = dst_address_byte_array[i + 30];\n            dst_address_byte_array_filled_3[i] = dst_address_byte_array[i + 60];\n        }\n\n        out[8] = Field::from_be_bytes::<30>(dst_address_byte_array_filled_1);\n        out[9] = Field::from_be_bytes::<30>(dst_address_byte_array_filled_2);\n        out[10] = Field::from_be_bytes::<30>(dst_address_byte_array_filled_3);\n        out\n    }\n\n    fn unpack(fields: [Field; 11]) -> Self {\n        assert(false, \"unpack not implemented\");\n        TokenCommitted {\n            Id: fields[1] as Field,\n            amount: 0 as u128,\n            token: AztecAddress::zero(),\n            timelock: 0 as u64,\n            src_receiver: AztecAddress::zero(),\n            dst_chain: \"000000000000000000000000000000\",\n            dst_asset: \"000000000000000000000000000000\",\n            dst_address: \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n        }\n    }\n}\n\n#[derive(Serialize)]\npub struct TokenLockAdded {\n    pub Id: Field,\n    pub hashlock: [u8; 32],\n    pub timelock: u64,\n}\n\nimpl Packable<5> for TokenLockAdded {\n    fn pack(self) -> [Field; 5] {\n        let mut out = [0 as Field; 5];\n        out[0] = 0xC1D4E792;\n        out[1] = self.Id;\n\n        let (hashlock_high, hashlock_low) = bytes_to_u128_limbs(self.hashlock);\n        out[2] = hashlock_high as Field;\n        out[3] = hashlock_low as Field;\n        out[4] = self.timelock as Field;\n        out\n    }\n\n    fn unpack(fields: [Field; 5]) -> Self {\n        let Id = fields[1];\n        let hashlock = u128_limbs_to_bytes(fields[2] as u128, fields[3] as u128);\n        let timelock = fields[4] as u64;\n        TokenLockAdded { Id, hashlock, timelock }\n    }\n}\n\n#[derive(Serialize)]\npub struct TokenRefunded {\n    pub Id: Field,\n}\n\nimpl Packable<2> for TokenRefunded {\n    fn pack(self) -> [Field; 2] {\n        let mut out = [0 as Field; 2];\n        out[0] = 0x2D17C6B8;\n        out[1] = self.Id;\n        out\n    }\n\n    fn unpack(fields: [Field; 2]) -> Self {\n        let Id = fields[1];\n        TokenRefunded { Id }\n    }\n}\n\n#[derive(Serialize)]\npub struct TokenRedeemed {\n    pub Id: Field,\n    pub hashlock: [u8; 32],\n    pub secret: [u8; 32],\n}\n\nimpl Packable<6> for TokenRedeemed {\n    fn pack(self) -> [Field; 6] {\n        let mut out = [0 as Field; 6];\n        out[0] = 0x4F8B9A3E;\n        out[1] = self.Id;\n\n        let (hashlock_high, hashlock_low) = bytes_to_u128_limbs(self.hashlock);\n        out[2] = hashlock_high as Field;\n        out[3] = hashlock_low as Field;\n\n        let (secret_high, secret_low) = bytes_to_u128_limbs(self.secret);\n        out[4] = secret_high as Field;\n        out[5] = secret_low as Field;\n\n        out\n    }\n\n    fn unpack(fields: [Field; 6]) -> Self {\n        let Id = fields[1];\n        let hashlock = u128_limbs_to_bytes(fields[2] as u128, fields[3] as u128);\n        let secret = u128_limbs_to_bytes(fields[4] as u128, fields[5] as u128);\n\n        TokenRedeemed { Id, hashlock, secret }\n    }\n}\n\n#[derive(Serialize)]\npub struct TokenLockedFirst {\n    pub Id: Field,\n    pub amount: u128,\n    pub token: AztecAddress,\n    pub timelock: u64,\n    pub src_receiver: AztecAddress,\n    pub dst_chain: str<30>,\n    pub dst_asset: str<30>,\n    pub dst_address: str<90>,\n}\n\nimpl Packable<11> for TokenLockedFirst {\n    fn pack(self) -> [Field; 11] {\n        let zero: Field = 0;\n        let mut out = [zero; 11];\n        out[0] = 0x9E5A4F03;\n        out[1] = self.Id;\n        out[2] = self.amount as Field;\n        out[3] = self.token.inner;\n        out[4] = self.timelock as Field;\n        out[5] = self.src_receiver.inner;\n\n        let dst_chain_byte_array = self.dst_chain.as_bytes();\n        let mut dst_chain_byte_array_filled = [0 as u8; 30];\n        for i in 0..dst_chain_byte_array.len() {\n            dst_chain_byte_array_filled[i] = dst_chain_byte_array[i];\n        }\n        out[6] = Field::from_be_bytes::<30>(dst_chain_byte_array_filled);\n\n        let dst_asset_byte_array = self.dst_asset.as_bytes();\n        let mut dst_asset_byte_array_filled = [0 as u8; 30];\n        for i in 0..dst_asset_byte_array.len() {\n            dst_asset_byte_array_filled[i] = dst_asset_byte_array[i];\n        }\n        out[7] = Field::from_be_bytes::<30>(dst_asset_byte_array_filled);\n\n        let dst_address_byte_array = self.dst_address.as_bytes();\n        let mut dst_address_byte_array_filled_1 = [0 as u8; 30];\n        let mut dst_address_byte_array_filled_2 = [0 as u8; 30];\n        let mut dst_address_byte_array_filled_3 = [0 as u8; 30];\n\n        for i in 0..30 {\n            dst_address_byte_array_filled_1[i] = dst_address_byte_array[i];\n            dst_address_byte_array_filled_2[i] = dst_address_byte_array[i + 30];\n            dst_address_byte_array_filled_3[i] = dst_address_byte_array[i + 60];\n        }\n\n        out[8] = Field::from_be_bytes::<30>(dst_address_byte_array_filled_1);\n        out[9] = Field::from_be_bytes::<30>(dst_address_byte_array_filled_2);\n        out[10] = Field::from_be_bytes::<30>(dst_address_byte_array_filled_3);\n        out\n    }\n\n    fn unpack(fields: [Field; 11]) -> Self {\n        assert(false, \"unpack not implemented\");\n        TokenLockedFirst {\n            Id: fields[1] as Field,\n            amount: 0 as u128,\n            token: AztecAddress::zero(),\n            timelock: 0 as u64,\n            src_receiver: AztecAddress::zero(),\n            dst_chain: \"000000000000000000000000000000\",\n            dst_asset: \"000000000000000000000000000000\",\n            dst_address: \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n        }\n    }\n}\n\n#[derive(Serialize)]\npub struct TokenLockedSecond {\n    pub Id: Field,\n    pub hashlock: [u8; 32],\n    pub ownership_hash: [u8; 32],\n}\n\nimpl Packable<6> for TokenLockedSecond {\n    fn pack(self) -> [Field; 6] {\n        let mut out = [0 as Field; 6];\n        out[0] = 0x9E5A4F03;\n        out[1] = self.Id;\n\n        let (hashlock_high, hashlock_low) = bytes_to_u128_limbs(self.hashlock);\n        out[2] = hashlock_high as Field;\n        out[3] = hashlock_low as Field;\n\n        let (ownership_hash_high, ownership_hash_low) = bytes_to_u128_limbs(self.ownership_hash);\n        out[4] = ownership_hash_high as Field;\n        out[5] = ownership_hash_low as Field;\n\n        out\n    }\n\n    fn unpack(fields: [Field; 6]) -> Self {\n        assert(false, \"unpack not implemented\");\n        TokenLockedSecond {\n            Id: fields[1] as Field,\n            hashlock: [0 as u8; 32],\n            ownership_hash: [0 as u8; 32],\n        }\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "63": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "64": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{\n    gas::GasOpts, private_context::PrivateContext, public_context::PublicContext,\n    returns_hash::ReturnsHash,\n};\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\nuse crate::test::helpers::cheatcodes;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<N>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) -> T {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\n// UtilityVoidCallInterface\n\npub struct UtilityVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\npub trait TXEPublicCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEPrivateCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEUtilityCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self) -> T;\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n        returns\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n        returns\n    }\n}\n"
    },
    "71": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        include_by_timestamp::IncludeByTimestamp,\n        log_hash::LogHash,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub include_by_timestamp: IncludeByTimestamp,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<Counted<L2ToL1Message>, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            include_by_timestamp: self.include_by_timestamp,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:include-by-timestamp\n    pub fn set_include_by_timestamp(&mut self, include_by_timestamp: u64) {\n        // docs:end:include-by-timestamp\n        self.include_by_timestamp =\n            IncludeByTimestamp::min_with_u64(self.include_by_timestamp, include_by_timestamp);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.l2_to_l1_msgs.push(message.count(self.next_counter()));\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "72": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_U32_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> u32 {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> u128 {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> u128 {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> u32 {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> u32 {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "73": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n\n    pub fn get_preimage_and_assert_empty<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n        assert_eq(self.hash, 0);\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "74": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_timestamp, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    timestamp: u64,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let contract_address = get_contract_address();\n        let version = get_version();\n        let chain_id = get_chain_id();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn timestamp(self) -> u64 {\n        self.timestamp\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "77": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/event/event_selector.nr",
      "source": "use dep::protocol_types::{\n    hash::poseidon2_hash_bytes,\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    // TODO(#2707): Consider making this a u64 as we already cast this to that when encoding the message. This would decrease\n    // the likelihood of collisions without any extra cost.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "79": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_BYTECODE, GENERATOR_INDEX__PUBLIC_CALLDATA,\n        GENERATOR_INDEX__SECRET_HASH, MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS,\n    },\n    hash::{\n        poseidon2_hash_subarray, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice,\n        sha256_to_field,\n    },\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n/**\n * Computes the public bytecode commitment for a contract class.\n * The commitment is `hash([separator, ...bytecode])` where bytecode omits the length prefix present\n * in `packed_bytecode`.\n *\n * @param packed_bytecode - The packed bytecode of the contract class. 0th word is the length in bytes.\n *    packed_bytecode is mutable so that we can avoid copying the array to construct one starting with\n *    separator instead of length.\n * @returns The public bytecode commitment.\n */\npub fn compute_public_bytecode_commitment(\n    mut packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS],\n) -> Field {\n    // First field element contains the length of the bytecode\n    let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\n    let bytecode_length_in_fields: u32 =\n        (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\n    // Don't allow empty public bytecode.\n    // AVM doesn't handle execution of contracts that exist with empty bytecode.\n    assert(bytecode_length_in_fields != 0);\n    assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\n\n    // Packed_bytecode's 0th entry is the length. Replace it with separator before hashing.\n    let separator = GENERATOR_INDEX__PUBLIC_BYTECODE.to_field();\n    packed_public_bytecode[0] = separator;\n    // +1 to length to account for the separator\n    let nonzero_length = bytecode_length_in_fields + 1;\n\n    poseidon2_hash_subarray(packed_public_bytecode, nonzero_length)\n    // NOTE: we use poseidon2_hash_subarray here because we want to hash the bytecode only up to\n    // its nonzero length. We do NOT want to include a `1` at the end to indicate \"variable length\",\n    // and we want to enforce that all trailing elements are zero.\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "91": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(self.global_variables.block_number, public_data_tree_index)\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "94": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "95": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "96": {
      "path": "/home/nerses/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    }
  }
}
